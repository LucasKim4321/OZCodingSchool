
// ------------------------------ //
reset을 사용해 이전 커밋으로 돌아가기
// ------------------------------ //

# log 정보 확인 후 커밋 해시 확인 및 복사
git log 

# 복사한 커밋 해시를 이용해 reset 명령어와 원하는 옵션을 사용합니다.
커밋 해시를 전부 입력하거나 앞 7자리만 입력하거나
git reset  스테이징 된거 리셋 됨.
git reset --hard [커밋 해시]
git reset --soft [커밋 해시]
git reset --mixed [커밋 해시]

# 다시 한번 log를 활용해 정상적으로 reset이 되었는지 확인
git log

reset에 사용할 수 있는 옵션은 hard 외 soft, mixed 2가지가 더 있습니다.

 - hard : 이전 commit으로 되돌린 후, 그 이후 이력들을 모두 삭제
 - soft : 이전 commit으로 되돌린 후, 그 이후 이력들의 내용이 삭제되지 않고 stage에 올라가있어 언제든지 commit을 진행할 수 있는 상태가 됨.
 - mixed : 이전 commit으로 되돌린 후, 그 이후 이력들의 내용이 삭제되지 않았지만 다시 commit 하기 위해서는 다시 add명령어를 이용해 stage에 올려 commit을 진행해야함.

Reset은 언제 사용하나요?
혼자만 사용하는 브랜치인 경우
origin에 있지만 아무도 이 브랜치를 사용하지 않는다는 확신을 가지는 경우

혼자만 사용하는 프로젝트에 적합
그외 commit을 되돌릴 때는 revert를 사용.

실수로 reset hard 사용해 사라진 커밋 되살리기

reflog 명령어 사용하기
reflog 명령어를 이용하면 reset으로 사라진 커밋을 복구할 수 있습니다.
reflog는 reference(참조)와 log(로그)의 합성어로 HEAD의 참조 이력을 로그 형태로 출력해주는 명령어입니다.

reflog 사용법

커맨드에 입력
git reflog 삭제된 커밋 로그 확인

git reset --hard [삭제된 커밋 해시]

원격 브랜치 강제 동기화
git push origin <branch-name> --force

// ------------------------------ //
  revert로 이전 commit으로 돌아가기
// ------------------------------ //

revert
원하는 시점의 커밋된 내용만 되돌림
되돌린 내용에 대해 새로운 커밋을 생성함함

#log 정보 확인 후 커밋 해시 확인 및 복사
git log

# 복사한 커밋 해시를 이용해 reset 옵션으로는 hard를 사용
git revert [커밋 해시]

# 다시 한번 log를 활용해 정상적으로 revert가 되었는지 확인
git log


// -------------------------------------- //
SouceTree를 이용해 이전 commit으로 돌아가기
리파짓토리를 불러온 후
해당 커밋을 우클릭해 작업 선택
// -------------------------------------- //


// -------------------------------------- //
 브랜치 생성 / 이동 / 삭제하기 / 이름 바꾸기
// -------------------------------------- //

# 브랜치 생성
git branch [브랜치 명]
git push -u [리모트명] [브랜치 명]

# 생성한 branch로 이동
git switch [브랜치 명]

# 브랜치 생성과 동시에 이동
git switch -c [브랜치 명]

# 브랜치 삭제
git branch -d [브랜치 명]  병합 상태에서만 삭제 가능
git branch -D [브랜치 명]  무시하고 그냥 삭제

# 원격 브랜치 삭제
git push [리모트명] --delete [브랜치 명]
git push [리모트명] -d [브랜치 명]

# 브랜치 되살리기
git reflog 원하는 시점 확인
git branch [지정할 이름] [커밋 해시]

# 브랜치 이름 바꾸기
git branch -m [현재 브랜치 명] [새 브랜치명]

-u 또는 --set-upstream 옵션은 로컬 브랜치를 원격 브랜치와 연결(업스트림 설정)할 때 사용됩니다.

원하는 시점에 branch를 생성
git checkout -b [새 브랜치명] [해시코드]

// -------------------------------------- //
     브랜치 합치기 Merge 기능 사용하기기
// -------------------------------------- //

#원하는 branch로 이동하는 명령어
git switch [이동을 원하는 브랜치]

#main에 branch의 커밋 이력을 합칠 때 사용하는 명령어
git merge [합치고 싶은 branch]

main branch 에 new2 branch를 합치려면
git checkout main 해서 main으로 간 후 
git merge new2 해야함.


merge 방식
fast-forward, 3-way-merge

fast-forward 방식 (합치고자 하는 branch를 따라감)
git merge --ff [브랜치명]

3-way-merge 방식 (일반적인 방식)

fast-forward방식으로 merge되지 않도록 merge하기
git merge --no-f [브랜치명]

squash 합치고자 하는 대상 branch의 내용물만 가져오고 merge 흔적을 남기지 않음.
git merge --squash [대상 브랜치]

// ------------------- //
    Rebase(재배치)로 합치기
// ------------------- //

Rebase를 실행하면 branch 이력이 삭제되고 main에 커밋 이력들이 합쳐집니다.
이때, main의 head는 main에서 커밋된 마지막 위치에 있기 때문에 merge를 이용해
합친 branch와 다시 한번 합치는 과정을 진행해야 합니다.

#합치려는 branch로 이동
git switch [브랜치명]

#합치려는 branch의 커밋 이력을 합칠 때 사용하는 명령어
git rebase main

#main branch로 이동
git switch main

#main에서 main branch와 합치고자하는 branch를 merge 진행
git merge [브랜치명]


mac에서 커맨드에 경로가 보이게 설정
iterm2 설치

git remote 설정 origin으로 설정 암묵적인 룰
포크로 할 시 또 다르게 설정

업스트림 설정해서 푸시함 다음부터는 push만 하면됨됨
git push -u [리모트명] [브랜치 명]
이거 한 후
git push

// ------------------- //
      cherry-pick
// ------------------- //
원하는 커밋이력만 가져오는 기능

git cherry-pick [해시 코드]


// ------------------- //
    conflict(충돌상황)
// ------------------- //
충돌 상황이 생기면 충돌해결 후 merge가능
편집기를 통해 수신할 내용 선택
git add .
git commit 하면 커밋 내용이 입력되어 있음. 
:wq 로 저장 후 종료
git log --oneline 확인하면 merge가 잘 되어 있음

rebase 충돌상황
git switch [브랜치명] rebase할 브랜치로 이동
git rebase main  rebase 사용시 충돌 발생
수신할 내용 선택
git add.
git rebase --continue 충돌 밯생
수신할 내용 선택
git add .
git rebase --continue
git switch main  리베이스 후 메인으로 이동
git merge [브랜치명] 리베이스를 한 브랜치를 합침.


