Git
로컬 버전 관리 시스템
  인터넷이 연결되지 않은 환경
  다른 개발자와의 작업 공유가 어려움
GitHub
  웹 기반 버전 관리 시스템
  클라우드 서버에 소스 코드를 업로드하여 공유 가능
  분산 버전 제어, 엑세스 제어, 소스 코드관리, 버그 추적, 기능 요청 및 작업 관리 기능 제공

깃 작업 과정

원본 깃
포크된 깃
로컬 깃

원본 깃을 포크로 복사해서 포크된걸 로컬로 클론한다.
로컬과 포크된 깃을 활욜해 작업하다가 마지막에 원본에 업로드

tag기능
특정 시점을 키워드로 저장하고 싶을 때
commit에 버전 정보를 붙이고자 할 때

마지막 커밋에 태그 달기
git tag "태그명"
git tag -a "태그명"

원하는 커밋에 태그 달기
git tag "태그명" [커밋해시] -m [메시지]

태그 리스트 확인
git tag
git tag -l

원하는 태그를 필터링해서 검색
git tag -l "v1.*"

원하는 태그로 체크아웃
git checkout "태그명"

태그의 내용 확인
git show "태그명"

태그 삭제
git tag -d "태그명"

// ------------------- //
        버전 규칙
// ------------------- //
버전을 주.부.수 숫자로 하고   예) v.1.0.0
1. 기존 버전과 호환되지 않게 API가 바뀌면 '주'버전을 올린다.
2. 기존 버전과 호환되면서 새로운 기능을 추가하면 '부'버전을 올린다.
3. 기존 버전과 호환되면서 버그를 수정한 것이라면 '수'버전을 올린다.

브랜치 원격에 업로드하기
git push 리모트명(origin) 브랜치명

원격 브랜치 삭제하기
git push 리모트명(origin) -d 브랜치명


// ------------------- //
        Git Hooks
// ------------------- //

Git Hooks는 Git상의 이벤트마다 자동으로 실행될 스크립트를 지정하는데 사용됩니다.
  commit 후 자동으로 이모지 등록
  commit 후 push하면 테스트 코드 자동실행 후 검증
  Git Action과 같은 CI/CD에 사용

gitmoji-conflict 설치
  윈도우
    먼저 Node.js 설치
    터미널에서 npm i -g gitmoji-cli
  맥
    먼저 brew 설치
    터미널에서 brew install gitmoji

프로젝트의 훅에 적용
gitmoji -i


// ------------------- //
   Submodule(서브모듈)
// ------------------- //
Git 프로젝트에서 다른 Git프로젝트를 하위 디렉토리에 포함시키는 방법입니다.
이때 상위 리포짓토리를 슈퍼 프로젝트(superproject)(부모 저장소),
하위 리포짓토리를 서브 모듈(submodule)(자식 저장소)이라고 부릅니다.
서브 모듈을 사용하면 하나의 Git 저장소에 여러개의 프로젝트를 관리 할 수 있으며,
각 프로젝트는 별도의 저장소로 유지됩니다.
이를 통해 복잡한 프로젝트를 여러 저장소로 분할하여 개발, 관리, 배포를 용이하게 할 수 있습니다.

용도
  프로젝트 폴더 안에 또 다른 프로젝트가 존재해야 할 때 사용
  여러 프로젝트에 사용되는 공통 모듈일 때 유용

사용법
  부모가 될 프로젝트의 디렉토리상 터미널에서 아래 명령어 실행
  git submodule add [자식 리포짓토리 주소] [하위 폴더명(없을 시 생략)]
  프로젝트 폴더 내 submodule 폴더와 .gitmodules파일 확인
  git status로 스테이징된 변경사항 확인 후 커밋

서브모듈의 내용을 변경시 부모, 자식 둘 다 커밋 해줘야힘.
부모 폴더에서 커밋 후
자식 폴더로 이동해서 커밋

서브모듈 삭제
.git/modules에 있는 서브모듈 폴더 삭제 (Remove-Item -Recurse -Force <서브모듈_경로>)
최상위 폴더에서 서브모듈 폴더 삭제 (Remove-Item -Recurse -Force <서브모듈_경로>)
.gitmodules에서 서브모듈 관련 정보 삭제 또는 .gitmodules삭제
변경된 내용 커밋


// ------------------- //
    Subtree(서브트리)
// ------------------- //
서브트리는 서브리포짓토리의 내용을 메인 리포지토리로 병합합니다.
서브모듈과 달리 폴더 구조에 통합됩니다.

// ------------------- //
     리포짓토리 병합
// ------------------- //
서브리포지토리 원격 추가
git remote add other-repo(새로운원격이름) <서브리포지토리_URL>
git fetch other-repo
서브리포지토리 병합
git merge other-repo/main --allow-unrelated-histories
원격 삭제
git remote remove other-repo


// ------------------- //
        fetch
// ------------------- //
git fetch는 원격 저장소(예: GitHub, GitLab)에서 변경된 내용을 가져오지만,
로컬 브랜치에는 병합하지 않는 명령어입니다.

리모트 추가
git remote add other-repo(새로운원격이름) <서브리포지토리_URL>
패치
git fetch [원격이름름]

# 특정 브랜치만 fetch
git fetch [원격 이름] [브랜치명]