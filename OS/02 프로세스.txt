
------------------
7. 프로세스의 이해
------------------

# 프로세스

프로세스란 '실행 중인 프로그램'을 뜻한다! 예를 들어
아래 게임의 실행파일 이름을 volly.exe라고 하면, 해당 실행파일은 프로그램이다.
게임을 즐기기 위해서 volley.exe를 더블클릭하면, 프로그램의 실행을 위해
운영체제는 필요한 자원을 할당하고 관리하기 시작한다.
그렇게 시작된 아래의 게임은, 다름아닌 프로세스이다.

# 프로세스 구조

명령어가 담긴 코드 영역
전역변수 등이 담긴 데이터 영역
지역변수 등이 담긴 스택 영역
동적 메모리 할당을 위한 힙 영역

# 레지스터 

CPU [ALU, CU, Register Set]
프로그램을 실행하기 위해서는 절대적으로 레지스터가 필요하다!


------------------
8. 프로세스 상태
------------------

Process Control Block

CPU는 한번에 하나의 연산만 수행할 수 있다.
CPU는 여러 개의 프로세스를 동시에 실행하지 않고, 빠르게 번갈아 가며 실행한다.

운영체제는 프로세스 컨트롤 블록, PCB를 만들어 관리한다.
여기에는 프로세스를 식별하기 위해 필요한 정보들이 저장된다.
=> 프로세스 ID, 레지스터 데이터, 스케줄링 정보, 그리고 상태 등

# 프로세스 상태
운영체제는 cpu가 여러개의 프로세스를 번갈아 실행할 수 있도록 해야하기 때문에
각 프로세스는 상황에 따라 서로다른 상태 정보를 가진다.


              <-> 실행 ->
생성  ->  준비  <---------  대기  ->  종료

생성 : 보조기억장치에 저장된 프로그램을 메모리에 올려서 실행시키는 과정
준비 : 생성과 동시에 준비 상태가 됨. cpu에 의해 실행될 준비를 함.
실행 : cpu에 의해 실행되고 있는 상태. 우선순위에 따라 일시정지하고 다른걸 실행하는 과정을 반복함.
대기 : 인터럽트 발생으로 잠시 대기하는 상태. 다시 실행하려면 준비 상태로 다시 전환수 실행하는 과정을 거친다.
종료 : 할일을 마친 프로세스가 종료되는 과정. 프로세스의 소멸이라고 부르기도함.


프로세스는 실행도중 시스템콜을 통해 다른 프로세스를 생성할 수도 있다.
이때 생성된 프로세스는 독릭적인 영역을 가진다.

최초의 프로세스  -  프로세스  - 프로세스 
             -  프로세스  - 프로세스
                        - 프로세스

------------------
9. 컨텍스트 스위칭  
------------------

여러개의 프로세스를 관리해가며,
마치 동시에 실행되는 것처럼 운영할 수 있는 운영체제를 가리켜
'멀티 프로세스 운영체제'라 한다.

여러개의 프로세스를 관리하는 것은, 운영체제에게 무척 부담되는 일이다.

준비 실행 대기 과정을 반복하게 되는데

CPU가 현재 실행 중인 프로세스(또는 스레드)의 상태(Context)를 저장하고,
다른 프로세스의 상태로 전환하는 과정을 말합니다.

쉽게 말해,

"A 프로그램 하던 걸 잠깐 멈추고, B 프로그램으로 잠시 바꾸는 작업"

운영체제는 하나의 CPU로 여러 프로세스(또는 스레드)를 동시에 실행하는 것처럼 보이게 하기 위해
CPU 시간을 나눠서(process scheduling) 사용합니다.
이때 CPU를 넘겨주는 과정에서 컨텍스트 스위칭이 발생합니다.

------------------
10. 프로세스 생성
------------------

프로그램 실행 시, 운영체제는 코드 영영과 데이터 영역을 메인 메모리에 올리고
빈 스택과 빈 힙을 만들어 곤간을 확보한다.
이는 시스템에게는 상당한 부담을 주는 일이다.

운영체제의 메모리 관리 작업을 통해 빈 스텍과 빈 힙을 만든다.

새로운 프로세스를 생성하는 것보다, 기존의 프로세스를 복사하는 것이 더 빠르다.
따라서 모든 프로세스는 최초의 프로세스로분터 복사된다. 


------------------
11. 스레드의 이해
------------------

스레드(Thread)
컨텍스트 스위칭으로 인한 부하를 줄이기 위한 답은 하나, 프로세스를 줄이는 것이다.
프로세스는 슬하(?)에 스레드를 두어 작업을 나누어 처리할 수 있다.

스레드는
프로세스 내에 존재하는 프로세스의 구성원
프로세스가 처리하는 작업의 실행단위
한개만 있을 수도 있고 10개가 있을 수 있다.
프로세스 내에 스레드 끼리는 프로세스의 컨트롤 블럭, 코드 영역, 데이터 영역, 힙 영역을 공유함.
구조적 한계 때문에 스택 영역은 각 스레드 마다 따로 가진다.


        스레드                           프로세스                           스레드
                        <--     명령어가 담긴 코드 영역         -->
                        <--     전역변수 등이 담긴 데이터 영역    -->
지역변수 등이 담긴 스택 영역           지역변수 등이 담긴 스택 영역            지역 변수 등이 담긴 스택 영역
                        <--     동적 메모리 할당을 위한 힙 영역   -->

작업을 스레드 단위로 처리하게 되면 처리할 작업이 늘어나더라도 프로세스가 늘어나지 않고 스레드만 늘어나서 효율적

프로세스 내에 여러개의 스레드가 있을 때 구분을 위해 개별적인 id가 존재하고 스레드 컨트롤 블록도 존재

# 메모리 구조 관점에서 본 스레드 특징

스레드는 스레드가 하나 생성될 때마다 스레드를  위한 스택 영역이
추가로 생성될 뿐, 그 이외의 영역은 프로세스의 영역을 공유한다.

스레드는 프로세스가 처리해야 할 작업을 수행하기 위해 존재하는 것이므로,
코드 영역을 공유해 명령어에 접근할 수 있어야 한다.

명령어 실행 시 전역변수, 정적변수, 지역변수 등의 데이터에 접근해야 하므로
데이터 영역과 힘 영역도 공유해야 한다.

스택 (Stack) - 지역변수나 매개변수를 저장하기 위해 사용하는 메모리 영역
              함수 호출시 전달되는 인자, 되돌아갈 주소 및 지역변수 등을 저장하기 위해서 사용하는 메모리 공간
              먼저 들어간것이 마지막에 나오는 스택 구조. first in last out 구조

------------------
12. CPU 스케줄링
------------------