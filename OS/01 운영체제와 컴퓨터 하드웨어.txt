
------------------
2. 운영체제란?
------------------

# 1 운영체제 (OS)(Operating System)

운영체제(運營 體制, 문화어: 조작 체계) 또는 오퍼레이팅 시스템(operating system, 약칭: OS)은
사용자의 하드웨어, 시스템 리소스를 제어하고 프로그램에 대한 일반적 서비스를 지원하는 시스템 소프트웨어이다.
컴퓨터 하드웨어를 관리할 뿐 아니라 응용 소프트웨어를 실행하기 위하여 하드웨어 추상화 플랫폼과 공통 시스템 서비스를 제공한다.
최근에는 가상화 기술의 발전에 힘입어 실제 하드웨어가 아닌 하이퍼바이저(가상 머신) 위에서 실행되기도 한다.

운영체제가 하는 일?
기본적인 사용환경 제공
하드웨어, 소프트웨어를 제어

운영체제란, 컴퓨터에 포함된 CPU나 메모리, 입출력 기기 등이
사용자에 기대에 맞게 역할을 수행할 수 있도록 도와주는
창구 역할을 하는 시스템 소프트웨어이다.

이러한 역할 때문에 운영체제를 가리켜 '플랫폼 소프트웨어'라고 부르기도 한다.

사용기기나 목적에 따라 필요한 운영체제의 유형이 다르기 때문에 운영체제의 종류 또한 무척 다양하다.

# 2 운영체제의 대표적인 역할들

 - 1.프로세스 관리
    프로그램을 실행하는 순간 프로세스 상태가 되고 운영체제가 관리하는 프로세스 공간으로 이동
    프로세스가 다른 프로세스와 충돌하지않게 관리
    프로세스가 사용할 메모리 공간, 데이터 자원을 제공
    프로세스 종료 시 프로세스 공간에서 제외됨.
    - 프로세스 생성과 종료
    - CPU 스케줄링 (어떤 프로세스에 CPU를 줄지 결정)
    - 프로세스 간 통신(IPC)
    - 프로세스 상태 전환 (실행, 대기, 준비 등)

 - 2.메모리 관리
    파일나 프로그램, 데이터 등을 임시로 저장.
    사용자가 사용할 다양한 데이터를 메모리에 적절하게 배치
    - 가상 메모리 관리
    - 메모리 할당 및 해제
    - 페이지 교체
    - 주소 공간 보호
    
 - 3.파일 시스템 관리
    파일 시스템(file system)은 컴퓨터에서 파일이나 자료를 쉽게 발견 및 접근할 수 있도록 보관 또는 조직하는 체제를 가리키는 말이다.
    이러한 파일 시스템을 운영체제가 관리한다.
    - 파일의 생성, 삭제, 읽기, 쓰기
    - 디렉토리 구조 관리
    - 권한 및 접근 제어
    - 저장 장치와의 인터페이스

 - 4.입출력 장치 관리 (I/O Device Management)
    - 프린터, 디스크, 키보드 등 하드웨어 장치와의 데이터 송수신 관리
    - 디바이스 드라이버를 통해 하드웨어와 통신
    - 입출력 요청 큐 관리, 버퍼링, 캐싱 등 처리

 - 5.사용자 인터페이스 제공 (User Interface)
    - 명령어 인터페이스(CLI) 또는 그래픽 인터페이스(GUI)를 통해 사용자와 소통
    - 시스템 자원 사용에 대한 정보를 사용자에게 제공

 - 6.보안 및 접근 제어 (Security & Access Control)
    - 사용자 인증 및 권한 부여
    - 시스템 자원에 대한 접근 제한
    - 악성 접근 시도 감지 및 방어

 - 7.시스템 자원 관리 (Resource Allocation)
    - CPU, 메모리, 저장장치, 네트워크 등 자원을 공정하고 효율적으로 분배
    - 여러 사용자의 요청이 충돌하지 않도록 조율

# 3 운영체제의 구조

응용프로그램    응용프로그램    응용프로그램
    ↕           ↕            ↕
  시스템콜      시스템콜       시스템콜
                ↕            ↕
              운영체제   [커널]
                ↕
              드라이버
                ↕
              하드웨어

커널(Kernel) : 프로세스, 메모리, 파일 시스템, 장치를 관리하고 시스템콜 인터페이스 기능을 제공.
              프로그램은 시스템콜을 통해 커널에 접근.
시스템콜(System Call) : 사용자 프로그램이 운영체제(커널)의 기능을 사용할 수 있도록 제공하는 인터페이스
                      사용자는 시스템콜을 통해 커널에 요청.

사용자는 CLI (Command Line Interface)와 GUI (Graphical User Interface) 환경을 통해
간접적으로 시스템 콜을 호출하여 파일 처리, 프로세스 실행, 디바이스 제어 등 운영체제의 다양한 기능을 손쉽게 이용할 수 있다.

개발자는 개발할 때 커널이 제공하는 함수를 통해 커널의 기능을 이용.
커널에 직접적으로 접근하지 않음.

드라이버 : 운영체제가 하드웨어 장치를 제어하고 사용할 수 있도록 도와주는 소프트웨어.
         커널이 모든 하드웨어를 지원할 순 없기 때문에 하드웨어 제조사가 드라이버를 제공.
         하드웨어에 특화된 명령을 커널에 맞게 해석하고 전달.
         
         - 시스템 콜과 하드웨어 사이에서 동작
           - 사용자가 파일을 인쇄하면, 내부적으로 시스템 콜이 발생 → 커널은 프린터 드라이버를 호출 → 드라이버가 프린터 하드웨어로 명령을 전달


------------------
3. 컴퓨터 하드웨어 구조
------------------

  CPU [ALU, CU, Register Set]      Main Memory
<---------------- 버스 시스템 -------------------->
         키보드       모니터        보조기억장치

컴퓨터의 기본 구조를 나타낸 도식으로,
CPU, 메모리, 입출력 장치가 버스 시스템을 통해 연결되어 작동하는 구조


용어	                          한글 명칭	          설명
ALU (Arithmetic Logic Unit)    산술논리연산장치	     산술 연산(+, - 등)과 논리 연산(AND, OR 등)을 수행하는 회로. CPU의 핵심 구성 요소 중 하나.
CU (Control Unit)	             제어장치	           명령어를 해석하고, 컴퓨터 각 구성 요소가 무엇을 언제 해야 하는지 제어 신호를 보내는 장치.
RS (Register Set)	             레지스터 집합	       CPU 내부의 초고속 임시 기억장소. 연산에 필요한 데이터나 주소 등을 잠깐 저장함.
Main Memory	                   주기억장치 (RAM)	    프로그램 실행 시 필요한 데이터를 저장하는 공간. CPU가 직접 접근 가능. 휘발성 메모리.
버스 시스템	(Bus System)          버스 시스템          CPU, 메모리, I/O 장치 간 데이터, 주소, 제어 신호를 전달하는 통로 역할. (Data Bus, Control Bus, Addres Bus 로 구분)
I/O 장치 (Input/Output Device)   입출력 장치         키보드, 마우스, 모니터 등의 데이터를 입력하고 출력할 수 있는 장치
보조기억장치 (Secondary Storage)   보조기억장치	        데이터를 영구적으로 저장하는 장치. 예: HDD, SSD, USB 등. 전원이 꺼져도 데이터 유지.


------------------
4. CPU이해
------------------

CPU [ALU, CU, Register Set]

CPU 구성요소 및 정리

용어	                          한글 명칭	         설명
ALU (Arithmetic Logic Unit)    산술논리연산장치	    산술 연산(+, - 등)과 논리 연산(AND, OR 등)을 수행하는 회로. CPU의 핵심 구성 요소 중 하나.
CU (Control Unit)	             제어장치	        명령어를 해석하고, 컴퓨터 각 구성 요소가 무엇을 언제 해야 하는지 제어 신호를 보내는 장치.
RS (Register Set)	             레지스터 집합	      CPU 내부의 초고속 임시 기억장소. 연산에 필요한 데이터나 주소 등을 잠깐 저장함.

주요 레지스터


프로그램 카운터 (Program Counter) - 다음에 실행할 명령어의 주소를 저장. 명령 실행 후 자동 증가됨.
인스트럭션 레지스터 (Instruction Register) - 현재 실행 중인 명령어 자체를 저장. 해석 및 실행 준비 용도. (해석해야할 명령어를 저장)
어드레스 레지스터 (Address Register) - 메모리 주소를 저장. 주기억장치에 접근할 때 사용됨. (cpu가 읽어들이고자 하는 주소값을 어드레스 버스로 보낼 때 저장)
버퍼 레지스터 (Buffer Register) - 메모리 ↔ CPU 간 데이터 전달 시 일시적으로 데이터를 저장.
플래그 레지스터 (Flag Register) - 명령 실행 결과(0인지, 오버플로우인지 등)의 상태 정보 저장. 조건 분기 등에 사용.
스택 포인터 (Stack Pointer) - 스택의 최상단 주소를 가리킴. 함수 호출, 리턴 시 사용. (스택에서 다음에 꺼내써야할 데이터가 어디에 있는지 알려주기 위해 사용)
스택 (Stack) - 지역변수나 매개변수를 저장하기 위해 사용하는 메모리 영역


# 클럭 펄스 (Clock Pulse)
컴퓨터가 제공하는 동기화시스템 동기화를 위해 사용

컴퓨터는 전자 기기이다. 컴퓨터에겐 전류가 혈액이고, 클럭 펄스가 혈액 순환이다.
컴퓨터의 동작은 클럭 펄스에 기반을 둔 채 이루어진다.

# 클럭(Clock)이란?
컴퓨터 시스템에서 모든 동작의 타이밍을 맞춰주는 기준 신호
전기적인 신호의 주기적인 진동으로, 모든 회로가 이 리듬에 맞춰 동작함
CPU 속도도 이 클럭 주파수로 표현 (예: 3.5GHz = 초당 35억 회 진동)

# 클럭 펄스(Clock Pulse)란?
그 클럭 신호의 개별 단위 한 번을 의미
일반적으로는 사각형 모양의 **디지털 신호(0 ↔ 1)**로 표현됨

   ▲      ▲      ▲      ▲      ▲
  | |    | |    | |    | |    | |
──┘ └────┘ └────┘ └────┘ └────┘ └──→ 시간
←──── 하나의 클럭 펄스 ─────→


------------------
5. 프로그램 실행 과정
------------------

# 폰 노이만 구조

CPU <-> 메모리 <- 프로그램

# 프로그램의 실행과정

프로그램 코드 -> 어셈블리 코드 -> 바이너리 코드

프로그램 코드 - 사용자 친화적 코드
어셈블리 코드 - 컴퓨터 친화적 코드
바이너리 코드 - 0과 1로 이루어진 컴퓨터가 실제로 이해할 수 있는 코드

실행 파일(바이너리 코드) -> 메모리 -> CPU

메모리[명령어1, 명령어2, 명령어3] -> CPU[1.Fetch 2.Decode 3.Execution]

1. Fetch (가져오기)
프로그램 카운터(PC)(Program Counter)가 가리키는 주소에서 명령어를 메모리에서 읽어옴
읽어온 명령어는 인스트럭션 레지스터(IR)(Instruction Register)에 저장됨

2. Decode (해독)
CU(Control Unit)이 명령어를 분석하여 어떤 동작을 수행할지 결정
연산이면 ALU로, 데이터 이동이면 메모리 주소나 레지스터 설정

3. Execute (실행)
ALU(Arithmetic Logic Unit)이 실제 명령을 실행
연산 수행, 데이터 이동, 분기 등
실행 결과는 레지스터나 메모리에 저장됨

# 데이터 이동은 시스템 버스를 통해서

         데이터 버스
cpu  ->  컨트롤 버스   ->  메모리
         어드레스 버스

데이터 버스 : 데이터 이동을 위해 필요한 버스
컨트롤 버스 : CPU가 원하는 바를 메모리에 전달하기 위한 버스
어드레스 버스 : 주소값을 이동하기 위해 필요한 버스


------------------
6. 인터럽트
------------------

프로그램 실행 중 돌발 상황

메모리[명령어1, 명령어2, 명령어3] -> CPU[1.Fetch 2.Decode 3.Execution]

인터럽트 : CPU가 어떤 작업을 수행하고 있을 때 CPU의 현재 작업을 방해하는 신호를 가리켜 '인터럽트'라고 한다.
         작업 수행 중에 먼저 처리해야할 작업이 생겼을 때 현재 작업을 일시 중지하고 인터럽트가 발생한 작업을 먼저 처리하는 과정을 거친다.

# CPU 인터럽트
정상적으로 수행할 수 없는 명령어가 입력되면, CPU는 인터럽트를 발생시킨다.
이때의 인터럽트를 가리켜 '예외'라고 부른다.

# 하드웨어 인터럽트
입출력 장치(하드웨어)로부터 발생하는 인터럽트는
'비동기 인터럽트'라고 표현하기도 한다.

# 인터럽트 핸들링
인터럽트가 발생하면, 인터럽트에 대응하는 무언가가 동작해야 한다.
이를 '인터럽트 서비스 루틴'이라 한다.

인터럽트 서비스 루틴은 인터럽트를 처리하기 위해
특정 인터럽트 신호에 대해 미리 정의되어 있는 프로그램 또는 함수이다.
