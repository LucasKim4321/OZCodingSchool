
------------------
13 스케줄링 알고리즘
------------------

# Queue : 줄, 대기행렬

운영체제는 준비 상태의 프로세스와 대기 상태의 프로세스를 관리하기 위해 큐(Queue) 자료구조를 사용한다.
선입 선출.
운영체제는 프로세스의 상태에 따라 구분된 큐를 가지고 있다.

준비 큐 : cpu를 이용하고자 하는 프로세스들이 대기하는 줄
대기 큐 : 입출력 장치를 이용하기 위해 대기 상태에 있는 프로세스들이 대기하는 줄
우선순위가 높은 프로세스는 먼저 늦게 줄을 서도 먼저 처리될 수 있다.

# 스케줄링 알고리즘

 스케줄링 알고리즘 적용 시, 고려해야 할 사항들이 있다.
  - 부하가 최소화되어야 한다.
  - 컴퓨팅 자원을 효율적으로 사용해야 한다.
  - 균형잡힌 스케줄링을 해야한다.
  - 대기 및 응답 시간이 너무 길어서는 안된다.

 알고리즘 종류
  - 선입선출 (First In First Out)
  - 최단 작업 우선 (Shortest Job First)
  - 라운드 로빈 (Round Robin) : 순차 순환 대기 방식
  - 우선순위 스케줄링 (Priority Scheduling)

# 선입선출 (First In First Out) 알고리즘
 단순하고 직관적이지만, 실행 시간이 짧은 프로세스가 실행 시간이 긴 프로세스 뒤에서 한참 기다리는 상황이 벌어질 수 있다.

# 최단 작업 우선 (Shortest Job First) 알고리즘
 프로세스의 실행 시간을 정확이 예측할 수 없다는 문제가 있어 현실적이지 않다.
 실행 시간이 짧은 프로세스가 계속 생성되면 실행 시간이 긴 프로세스의 대기 시간은 무한히 길어질 수도 있다.

# 라운드 로빈 (Round Robin) 알고리즘 : 순차 순환 대기 방식 알고리즘
 정해진 시간 만큼만 CPU를 점유하고, 시간이 다 지나면 컨텍스트 스위칭하는 방식
 점유 시간이 길면 실행 시간이 짧은 프로세스의 대기 시간이 길어지고
 점유 시간이 짧으면 컨텍스트 스위칭이 자주 일어나 성능 저하가 일어난다.

# 우선순위 스케줄링 (Priority Scheduling)
 우선순위 스케줄링은 앞선 알고리즘들을 좀 더 보완한 아이디어다.
 우선순위만 고려할 경우 우선순위가 낮은 프로세스가 배제되어 버리는 '기아' 상태에 빠질 수 있다.

# 우선순위 스케줄링에서 기아 상태에 빠지는걸 해결하기 위해 노화(Aging)와 같은 기법을 추가하여 보완할 수 있다.
  - 노화(Aging) 기법 : 우선순위가 낮은 프로세스가 시간이 지나면 점점 우선순위가 높아지게 만드는 것


------------------
14 프로세스간 통신
------------------

# 프로세스 간 통신 (IPC) (Inter-Process Communication)
 프로세스는 독립적으로 실행되지만, 필요 시 다른 프로세스와 데이터를 주고받으며 통신하는 경우도 있다.
 이를 가리켜 프로세스 간 통신이라 한다.

 통신을 하려면, 통신의 각 주체가 만날 수 있는 일종의 창구가 필요하다.
 프로세스 간 통신에서도 이는 마찬가지다.

# 메일 슬롯 방식과 파이프 방식

 - 메일슬롯 방식의 IPC
   데이터를 받기 위해서 프로세스가 우체통 역할을 하는 객체를 마련하고 이를 통해 데이터를 주고받는 방식.
   양방향으로 데이터를 주고 받으려면 양쪽 프로세스 모두가 우체통 역할을 하는 객체를 마련해야한다.

 - 파이프 방식의 IPC
   익명 파이프 또는 네임드 파이프를 이용해 데이터를 주고받는다.
   익명 파이프는 서로 관계가 있는 프로세스 간에 통신을 할 때 사용하는 단방향 파이프이고,
   네임드 파이프는 서로 관계가 없어도 프로세스 간에 양방향 통신을 할 수 있는 파이프이다.

예제 ex12.py


----------------------
15 프로세스간 통신 추가 예제
----------------------

예제 ex13.py

------------------
16 동기화
------------------

# 동기화
 프로세스들은 서로 독립적이지만, 프로세스 간 통신을 하거나 같은 대상에 대한 작업을 함으로써 협력할 수 있다.
 그런데 이때, 동시다발적으로 작업을 처리하면 문제가 발생할 수 있다.

# 공유자원과 임계구역
 프로세스 간 통신에서는 공동으로 이용하는 변수가 파일, 입출력 기기 등이 존재한다.
 이를 가리켜 '공유자원'이라 한다.
 공유자원은 각 프로세스의 접근 순서에 따라 결과가 달라질 수 있는데,
 프로세스가 동시에 실행할 경우 문제가 발생할 수 있는 영역을 가리켜 '임계 구역'이라 한다.

# 상호 배제 (Mutual Exclusion)
 동기화 기법은 임계구역에서 발생할 수 있는 문제를 해결하기 위한 기법이다.
 동기화 기법 구현 시에는 '상호배제'라는 조건을 만족시켜야 한다.

 상호배제란, 하나의 프로세스가 임게구역에 들어갔다면
 다른 프로세스는 임계구역에 들어갈 수 없다는 조건을 뜻한다.

# 뮤텍스 락 (Mutex Lock)
 Mutex = Mutual Exclusion
 여러 개의 프로세스나 스레드가 동시에 공유 자원에 접근하지 못하도록 하는 동기화 메커니즘.
 하나의 스레드만 임계 구역(Critical Section)에 접근할 수 있도록 락을 걸어주는 것.
 - 주요함수 : acquire() : 소유,잠금 / release() : 해졔

# 세마포어 (Semaphore)
 세마포어(Semaphore)는 멀티프로세스(또는 멀티스레드) 환경에서 공유 자원에 대한 접근을 제어하기 위해 사용되는 동기화 도구입니다.
 뮤텍스(Mutex)와 비슷하지만 보다 유연한 방식으로 여러 개의 접근을 허용할 수 있다는 점에서 차이가 있습니다.

 세파포어란?
  - 정수 값을 가지는 공유 변수 또는 카운터
  - 공유 자원에 접근 가능한 프로세스 또는 스레드 수를 제어함
  - 접근 가능한 자원이 없으면 기다리게(block) 하고, 자원이 생기면 다시 접근하게(wake) 함

 작동 방식

  세마포어는 보통 두 가지 연산으로 구성됩니다:

  연산	            설명
  wait() 또는 P()	세마포어 값을 감소시키고, 0보다 작아지면 대기. 프로세스가 임계구역에 들어갈 수 있는지, 기다려야하는지 여부를 알려줌
  signal() 또는 V()	세마포어 값을 증가시키고, 기다리는 프로세스/스레드를 깨움. 임계구역에서 기다리는 프로세스에게 들어가도 된다고 전달

  종류	설명
  카운팅 세마포어 (Counting Semaphore)	0 이상의 정수 값을 가짐. 동시에 여러 개의 접근을 허용할 수 있음
  바이너리 세마포어 (Binary Semaphore)	값이 0 또는 1. 사실상 뮤텍스와 동일하게 동작함

프로세스로 테스트
예제 ex14.py, ex15.py


------------------
17 동기화 추가 예제
------------------

스레드로 테스트
예제 ex16.py


------------------
18 데드락
------------------

서로가 서로를 완료될 때까지 기다려야 하는 상황이 생겼을 때를 데드락이라 한다.
자원을 공유하는 경우 생김.

다음 네 가지 조건을 모두 만족되는 경우에만 데드락이 발생할 가능성이 있다.
 - 상호배제 (Mutual exclusion)   - 자원은 동시에 한 프로세스만 사용할 수 있다.
 - 비선점 (No preemption)        - 강제로 자원을 뺏을 수 없다.
 - 점유 및 대기 (Hold and wait)   - 자원을 가진 채로, 다른 자원을 기다린다.
 - 원형 대기 (Circular waite)**   - 각 프로세스가 다음 프로세스의 자원을 기다리며 원형으로 기다림.