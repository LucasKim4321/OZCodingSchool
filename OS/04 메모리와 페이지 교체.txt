------------------
19 메모리의 이해
------------------

메모리 계층 구조 (Memory Hierarchy)

   ▶ 레지스터
       ↓
   ▶ 캐시 메모리 (L1, L2, L3)
       ↓
   ▶ 메인 메모리 (RAM)
       ↓
   ▶ 보조 기억장치 (HDD / SSD)

 레지스터 (Register)
  - CPU 내부에 있는 가장 빠른 기억장치
  - 연산 시 사용되는 데이터, 명령어 주소 등을 임시로 저장
  - 크기 작고 개수도 적지만 속도는 최고 (나노초 단위)

 캐시 메모리 (Cache)
  - CPU와 RAM 사이의 중간 기억장치
  - RAM보다 빠르지만, 레지스터보다는 느림
  - 최근 사용된 데이터를 저장하여 CPU가 RAM 접근 없이 빠르게 처리 가능

 메인 메모리 (RAM)
  - 프로그램 실행 중 필요한 데이터와 코드가 올라가는 공간
  - CPU가 직접 접근 가능
  - 휘발성 → 전원 끄면 데이터 사라짐
  - 속도는 캐시보다 느림

 보조 기억 장치 (HDD / SSD)
  - 비휘발성 저장장치
  - 운영체제, 응용프로그램, 사용자 데이터 저장
  - SSD는 HDD보다 훨씬 빠름
  - RAM보다 저렴하고 용량 큼, 속도는 느림

📌 속도 순: 레지스터 > 캐시 > RAM > SSD > HDD
📌 용량 순: HDD > SSD > RAM > 캐시 > 레지스터
📌 가격 단위당: 레지스터 > 캐시 > RAM > SSD > HDD


# 메모리 할당 방식
 여러 개의 프로세스를 메모리에 올려야 한다면, 선택할 수 있는 방식은 두 가지이다.
 가변 분할 방식과 고정 분할 방식이 바로 그것이다.

  - 고정분할 (Fixed Partitioning)
    메모리를 미리 정해진 크기로 나누어 분할함.
    프로세스 크기에 따라 파티션이 낭비되거나, 프로세스를 수용 못 함

  - 가변분할 (Variable Partitioning)
    메모리를 프로세스가 요청한 크기만큼 동적으로 할당
    파티션 크기는 유동적이며, 프로세스가 종료되면 해제됨
    여러 프로세스가 실행되고 종료되다 보면 메모리에 빈 공간이 여기저기 흩어짐 (외부 단편화)
    외부 단편화를 해결하기 위해, 메모리를 한쪽으로 몰아주는 압축(Compaction) 작업 수행 필요 (조각모음 작업)

  외부단편화
   메모리 전체적으로는 빈 공간이 충분한데,
   프로세스가 사용할 만큼 연속적인 공간이 없어서 할당이 불가능한 상태

# 고정 vs 가변 비교
항목	              고정 분할 방식             가변 분할 방식
분할 방식	           미리 고정된 크기로 분할      필요한 만큼 동적으로 분할
단편화 문제	         내부 단편화                외부 단편화
유연성	            낮음                     높음
구현 난이도	         쉬움                     복잡함
자원 활용 효율성	    낮음                     높음

# 스와핑
 실행 상태의 프로세스는 메인 메모리에 올리고, 실행 상태가 아닌 프로세스들은 보조 장치에
 따로 마련된 스왑 영역에 올린 다음 프로세스의 상태 변화에 따라 두 공간 사이에서
 프로세스가 이동하는 (교환되는) 것을 가리켜 '스와핑'이라 한다.


------------------
20 메모리의 이해 예제
------------------

------------------
21 가상 메모리 관리
------------------

--------------------
22 가상 메모리 관리 예제
--------------------

------------------
23 페이지 교체
------------------

------------------
24 페이지 교체 예제
------------------