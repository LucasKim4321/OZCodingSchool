
-------------------------------------------------
Day4 EdgeDB와 MySQL로 배우는 실전 DB개발과 테스트 자동화
-------------------------------------------------

## ch32 Docker를 이용하여 MySQL서버 실행하기

참조
notion/part2/Mysql 로 meeting 생성 구현하기/(mysql) 도커로 Mysql8 설치

Mysql 설치
- (mysql) 도커로 Mysql8 설치

    도커로 mysql 8 을 설치하겠습니다.

    이미  mysql 이 설치되어 있으신 분은 건너 뛰셔도 됩니다.

    `lsof -i:3306`

    `docker run --name mydb -e MYSQL_ROOT_PASSWORD=1234 -d -p 3306:3306 mysql:8`

    - `-e MYSQL_ROOT_PASSWORD=1234` 환경변수로 root password 를 지정합니다.
    - `-d` 백그라운드에서 실행되도록 합니다.
    - `-p 3306:3306` docker container 의 3306 포트와 호스트 머신의 3306 포트를 연결합니다.

    ## Pycharm 으로 데이터베이스에 연결

    Docker desktop 혹은 orb stack 에서 데이터베이스가 켜진것을 확인했다면 pycharm 으로 연걸합니다.

    `SELECT VERSION();`

    후 major 가 8로 시작한다면 성공입니다!


## ch35 [MySQL Ver.]PyTest, Tortoise-ORM을 활용한 TestCode 작성법

참조
notion/part2/Mysql 로 meeting 생성 구현하기/(mysql) tortoise-orm, cryptography, aerich 설치. 모델 생성

Mysql로 meeting 생성 구현하기
poetry add "tortoise-orm[asyncmy]==0.23.0"
poetry add cryptography==44.0.0
poetry add aerich==0.8.1 tomlkit==0.13.2
poetry add pydantic_settings==2.7.1

https://tortoise.github.io/

- tortoise-orm: django orm 이 async 를 (잘) 지원하지 않던 시절, 이를 대신하기 위해 탄생한 orm 입니다.
- cryptography: 비밀번호 방식으로 mysql 에 로그인 할 떄 필요합니다.
- aerich: tortoise-orm 의 migration tool 입니다. (sqlalchemy 에 alembic 이 있다면 tortoise 에는 aerich 가 있습니다.)
- pydantic_settings: 서버 동작에 필요한 변수들을 환경변수에서 읽어주거나 dot env 에서 읽어줍니다. 원래 pydantic v1 에서는 pydantic 자체에 포함된 라이브러리 였는데, v2 가 되면서 빠져나왔습니다. pydantic 이기 때문에 역시 타입 관련 기능이 강력합니다. 환경변수를 적절한 “파이썬 타입” 으로 변환시켜줍니다.
- tomlkit: (aerich 버그 때문에 설치합니다 😭) aerich 가 의존함에도 불구하고 의존성 그래프에 없기 때문에 수동으로 설차힙니다.

ORM은 Object-Relational Mapping의 약자로,
객체 지향 프로그래밍 언어에서 데이터베이스를 다룰 때 사용하는 기술

기쁜 소식: tortoise-orm 은 사용 방법이 django orm 과 90% 흡사합니다.

- 모델 선언방식
- QuerySet 을 사용해서 쿼리하는 점
- Orm 을 위한 테스트 프레임워크를 제공하는 점
이 거의 똑같습니다!

pydantic의 기능
현재 폴더를 기준으로 .env가 있으면 읽고 없으면 기본값을 불러옴.
.env에 ENV="invalid" 이렇게 변수가 선언되어 있는데.
config에 미리 정의한 enum env의 값으로 'local', 'stage', 'prod' 이렇게 정해져있기 때문에
ENV 값이 invalid이렇게 되어 있으면 에러가 난다.


# main하고 자동완성 기능을 사용하면 만들어줌.
# 파이참의 라이브 템플릿 기능

# 파일메뉴 클릭 런 으로 해당 파일을 실행
# 혹은 컨트롤 시프트 r로 해당 파일을 실행

# 커맨드 시프트 n  스크래치 파일 생성

# Swagger UI   http://localhost:8000/docs    대화형 API 문서 (기본 제공)
# ReDoc        http://localhost:8000/redoc   깔끔한 스타일의 API 문서


--------------
Replication
--------------

Replication 전략은
주로 데이터베이스 시스템에서 데이터의 복제 방식을 정하는 전략을 말합니다.
데이터의 가용성, 안정성, 확장성을 높이기 위해서 여러 서버에 동일한 데이터를 복제하는 방식.

쓰기, 수정, 삭제 작업 용도의 DB를 하나 쓰고 (writeDB)
읽기 전용 DB를 쓴다.  (read replica DB)

보통 읽기 작업이 많기 때문에 이런 전략을 사용하기도 한다.

- `connect_timeout: 5` 데이터베이스와 연결을 시도한 뒤,
5초 이내에 데이터베이스가 응답하지 않을 경우 기다리는 것을 멈춘 후 timeout error 를 일으킵니다.

- `maxsize: 30` 데이터베이스와 연결을 맺는일은 시간적 비용이 많이 드는 작업입니다.
어짜피 데이터베이스와는 자주 소통하기 때문에 매 번 연결을 새로 맺는 것이 아니라 기존에 맺어두었던 연결을 재활용 함으로써 효율적으로 통신합니다.
이를 “커넥션 풀” 이라고 하며, `maxsize` 는 커넥션 풀이 최대로 가지고 있을 수 있는 connection 의 수 입니다.

커넥션 풀(Connection Pool)은
데이터베이스 연결을 효율적으로 관리하기 위한 기술.
DB와의 연결(Connection)은 만드는 데 비용이 크고 느리기 때문에,
DB 연결을 미리 만들어 풀(pool)에 보관하고, 필요할 때 꺼내 쓰는 방식.

보통 gunicorn 은 “멀티 프로세스”를 사용합니다.
각 worker 가 별도의 프로세스입니다.
별도의 프로세스인 worker 들은 커넥션 풀을 공유하지 않고 저마다 각자의 커넥션 풀을 가지고 있습니다.
따라서 데이터베이스에 최대로 맺어질 수 있는 커넥션의 수는 = 커넥션 풀의 max size * worker 의 수 입니다.

connection 의 개수가 많을 수록 트래픽이 갑작스럽게 쏟아질때 더 유연하게 대처가 가능합니다만,
반대로 데이터베이스가 커넥션을 유지하기 위해 사용하는 메모리도 많아진다는 점 유념해 둡시다.


# MySQL : primary key를 정할 때 주의해야 되는 점
# MySQL version 8 이상 부터라면 (5.7 부터도 쓰긴함)
# innodb가 default engine (옛날 MyISAM)

# innodb의 특징 중 하나 ->  clustering index
# primary key를 기준으로
# primary key값이 비슷한 row들끼리 disk에서도 실제로 모여있음.

# HDD
# 랜덤 IO가 느리고, 순차 IO가 빠르다.

# SSD
# 순차 IO가 좀 더 빠르지만 랜덤 IO도 빠름.

# 그냥 int가 아니라, 비즈니스 작 의미가 있고
# 계속해서 증가하는 어떤 갑으로 설정하면
# 굉장히 빠르게 읽을 수 있습니다.

# int의 최대값 21억이지만 이걸 넘어서 사용하게 될 수도 있어서 bigint사용


## ch34 aerich를 활용한 Metting Model 마이그레이션


tortoise_models/meeting.py 작성

# 아직 정의 되지 않은 모델에 대한 오류 임시 해결
# async def create_meeting(cls, url_code: str) -> MeetingModel:  # MeetingModel정의가 아직 끝나지 않았기 때문에 에러남.
async def create_meeting(cls, url_code: str) -> "MeetingModel":  # 쌍따옴표를 사용해 임시로 에러 해결.

# Text : 길이가 길다. 인덱스 안됨.
# Varchar : 길이 제한, 인덱스 가능.
# mysql의 varcher는 255이하는 사용되는 크기가 같다.

마이그레이션하기 위해 초기화
aerich init -t app.configs.tortoise_config.TORTOISE_ORM

초기화 후 pyproject.toml에 설정이 생김.

db초기화
aerich init-db
안될시 db설정 확인.

migrations.models폴더에 마이그레이션 파일이 생김.
쿼리가 저장되어 있음.


Alembic
ORM을 바꾸려고 할 때 대공사를 하게 될 수도 있음.

Aerich
DB를 바꿀때 쿼리문을 수정해야함.

마이그레이트
aerich migrate

Database확인
새로고침 후 -> meeting -> modify table
필드 제대로 만들어졌나 확인


## ch35 [MySQL Ver.]PyTest, Tortoise-ORM을 활용한 TestCode 작성법

참조
notion/part2/Mysql 로 meeting 생성 구현하기/tortoise-orm, cryptography, aerich 설치. 모델 생성
notion/part2/Mysql 로 meeting 생성 구현하기/(mysql) httpx 설치, 테스트 작성하기

https://tortoise.github.io/contrib/unittest.html?h=conftest.py#py-test

initializer - 데이터베이스 생성과 연결 수립
finalizer - 남아있는 연결을 전부 종료(커넥션 종료)

최상위/conftest.py 생성
pytest는 프로젝트 최상단에 있는 conftest.py 자동으로 읽음

TEST_BASE_URL = "http://test"
TEST_DB_LABEL = "models"  # 테스트할 DB model
TEST_DB_TZ = "Asia/Seoul"  # 타임존 설정

def get_test_db_config() -> dict[str, Any]:
    tortoise_config = generate_config(
        db_url=f"mysql://{config.MYSQL_USER}:{config.MYSQL_PASSWORD}@{config.MYSQL_HOST}:{config.MYSQL_PORT}/test",
        app_modules={TEST_DB_LABEL: TORTOISE_APP_MODELS},
        connection_label=TEST_DB_LABEL,
        testing=True,  # testDB 자동 생성해줌
    )
    tortoise_config["timezone"] = TEST_DB_TZ

    return tortoise_config

# autouse가 활성화 되어 있으면 테스트 함수를 사용하지 않고도 fixture가 생성됨.
@pytest.fixture(scope="session", autouse=True)
def initialize(request: FixtureRequest) -> Generator[None, None]:
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    # Mocking은 실제 의존성을 대체할 가짜 객체를 만들어서 테스트를 수행하는 것
    with patch("tortoise.contrib.test.getDBConfig", Mock(return_value=get_test_db_config())):
        initializer(modules=TORTOISE_APP_MODELS)  # 커맨드 p 눌러보면 인자가 보임
    yield  # 종료될 때 호출됨.
    finalizer()  # yield가 없는 일반 fixture는 테스트가 처음 시작할 때 한번호출되고 종료될 때 호출안됨.
    loop.close()

# 테스트 함수에서 fixture 이름을 인자로 받으면 initialize를 가동시킴
# def test_func(initialize):
#     pass

# pytest는 async 함수를 원래는 할 수 없음.
# pytest-asyncio를 설치하면 pytest도 async함수를 실행 할 수 있음.
# pytest-asyncio의 event loop와 tortoise의 event_loop가 충돌하는 것을 피하기 위해
# pytest-asyncio의 event loop를 재정의. (기본 동작을 없앰)
@pytest_asyncio.fixture(autouse=True, scope="session")
def event_loop() -> None:
    pass

**Mocking(모킹)**은
테스트에서 자주 사용되는 개념으로,
어떤 객체나 함수의 실제 동작을 흉내 내는 가짜(mock) 객체를 만드는 것

- `initialize()`
pytest fixture 로, scope 가 session 이기 때문에 테스트 시작과 함께 생성되고,
모든 테스트가 종료된 이후에 yield 이후가 실행됩니다. tortoise 를 준비시키는 역할과,
테스트 종료후 남은 connection 을 정리하는 역할을 합니다.

- `event_loop()` 나쁜 짓(?) 이긴 하지만 의도적으로 pytest-asyncio 의 event loop 생성을 차단합니다.
이는 tortoise-orm 과 겹치지 않도록 하기 위함입니다.

주의: tortoise 는 async library 임에도 불구하고 pytest-asyncio 를 상정하지 않고 만들어 졌습니다.
테스트 함수 자체는 async 로 작성할 수 있지만, pytest 는 sync 함수로 인식합니다.
pytest-asyncio 는 async 테스트 함수를 실행하기 위해 스스로 event loop 를 생성하는데요,
문제는 tortoise 테스트 프레임워크가 생성하는 이벤트 루프와 서로 충돌합니다! (이 문제를 예방하기 위해 pytest-asyncio 가 event loop 를 생성하지 못하도록 차단하겠습니다.)
제일 좋은 방법은 tortoise 가 pytest-asyncio 를 지원해 주는 것인데… 버전 업데이트를 계속 기다릴 수는 없으므로,
이벤트 루프를 차단하는 꼼수(?) 를 사용했습니다.


설정이 끝났다면 httpx를 설치한 후 테스트 함수를 작성
poetry add httpx
poetry add httpx==0.28.1

DRF(Django Rest Framework)만든 팀이 httpx도 만듬.

fastapi 공식 문서의 테스트 가이드
https://fastapi.tiangolo.com/advanced/async-tests/#example


# app/tests/apis/v1/test_meeting_router_mysql 작성

class TestMeetingRouter(TestCase):
    async def test_api_create_meeting_mysql(self) -> None:  # 모든 테스트는 None을 반환하는게 정석
        # Given When Then 구조에서 Given은 자동생성되기 때문에 Given 생략

        # When
        # AsyncClient는 async연산이 필요해서 async를 사용
        # async로 열면 async로 닫아야함.
        async with httpx.AsyncClient(
            transport=httpx.ASGITransport(app=app),
            base_url="http://test",
        ) as client:
            response = await client.post("/v1/mysql/meetings")

        response.raise_for_status() #  응답 코드가 에러일 경우 예외(Exception)를 발생시키는 함수

        # Then: 테스트 결과를 검증
        # API 테스트에서 응답이 성공했는지(200 OK)를 확인하는 코드
        assert response.status_code == HTTP_200_OK # 여기까지만 하면 실제로 데이터가 생성됬는지 검증이 안됨.
        # API 테스트 성공 후 데이터 변환을 시도함. API 테스트 전에 시도하면 잘못된 오류코드로 혼란을 유도함.
        url_code = response.json()["url_code"]
        assert (await MeetingModel.filter(url_code=url_code).exists()) is True

# FastAPI는 ASGI인터페이스를 구현함.
# ASGI 규칙대로 호출하면 실제로 http요청을 하지 않아도 마치 http요청을 한것처럼 처리
# ASGITransport() : ASGI 규칙대로 호출
#
# ASGI란?
# ASGI (Asynchronous Server Gateway Interface)
# Python에서 비동기 웹 애플리케이션을 위한 표준 인터페이스입니다.
#
# WSGI의 업그레이드 버전입니다.
# FastAPI, Django Channels, Starlette, uvicorn 등에서 사용됩니다.

# 구분        WSGI                              ASGI
# 대상        동기 웹 앱 (Flask, Django 기본)      비동기 웹 앱 (FastAPI, Django Channels 등)
# 처리 방식    하나의 요청 처리 후 다음 요청           여러 요청을 비동기로 동시에 처리 가능
# 예         Flask, Django (기본)               FastAPI, Django Channels, Starlette
# 병렬성      제한적                              ✅ 웹소켓/HTTP/백그라운드 작업 가능

# 사용 상황                                     ASGI가 필요한가?
# 일반 웹사이트 (블로그, 쇼핑몰 등)                  ❌ 보통 WSGI로 충분
# 웹소켓, 실시간 채팅, 알림                        ✅ ASGI 필요
# FastAPI 사용 시                              ✅ ASGI 필요
# Django에서 Django Channels로 WebSocket 쓸 때  ✅ ASGI 필요

# await란?
# await는 비동기 함수 (async def) 안에서만 사용할 수 있는 키워드로,
# 다른 비동기 함수의 실행이 끝날 때까지 기다리는 역할을 합니다.

# HTTP는 다양한 응답을 주고 받을 수 있다.

# with (Context Manager)(컨텍스트 관리자)
# 리소스를 열고 닫는 과정을 자동으로 관리해주는 매우 강력한 문법입니다.
# 작업이 끝났을 때 자동으로 작업을 종료 close()를 시켜줌.
# 작업이 끝났을 때 작업을 종료 close()를 하지 않으면 다른 프로그램이 접근 할 수 없음.
#
# 대표적인 리소스 예시
# 리소스 종류           예시                                                 설명
# 파일                open("file.txt")                                     파일 핸들 (읽기/쓰기 후 닫아야 함)
# 네트워크 연결         requests.Session(), socket, FTP                      연결 후 종료해야 함
# 데이터베이스          connection.cursor()                                  커서 열고 닫기 필요
# 스레드 락            threading.Lock()                                     락 획득 후 해제 필요
# 입출력 장치           serial.Serial(), camera.open()                      장치 연결/해제
# 로그                logging에서 FileHandler, StreamHandler
# 가상 환경 / 세션      Django request, Flask context, transaction.atomic()
# 임시 파일/디렉터리     tempfile.NamedTemporaryFile()
# WebDriver          selenium.webdriver.Chrome()                          브라우저 열고 닫기


이것이 TDD(Test Driven Development) 입니다. TDD 는 다음 순서로 개발을 하는 방법론 입니다.

- 요구사항을 검증하는 테스트를 먼저 작성합니다. (응답이 제대로 오는지, 데이터베이스에 정말 insert 되었는지를 확인하는 테스트)
- 테스트를 실행하고, 실패하는 것을 확인합니다.
- 요구사항을 실제로 구현합니다.
- 테스트를 실행하고, 성공하는 것을 확인합니다. (실패했다면 구현중 어디서 실수했는지 파악한 후 수정합니다.)

정리

- pytest 는 프로젝트 제일 최상위의 [`conftest.py`](http://conftest.py) 를 자동으로 읽어들인다. 여기서 원하는 설정 + 필요한 fixture 를 정의할 수 있다.
- httpx 로 fastapi 에 대한 async test 를 만들 수 있다.
- 테스트 먼저 작성 한 이후에 구현을 하는것이 TDD 이다.

# CI 수정

  # 테스트 파일이 있는 경우에만 실행 할 수도 있음.
  # - name: Run tests only if test files exist
  # run: |
  # if find . -type f -name 'test_*.py' | grep -q .; then
  # ...
  # else
  # ...

  # 실제로 테스트 할 수 있는 코드가 있는지 판별 후 테스트 수행
  - name: Run tests only if tests actually exist
    run: |
      echo "🔍 Checking if pytest can collect any tests..."
      TEST_COUNT=$(poetry run pytest --collect-only -q 2>/dev/null | grep -c '::' || true)

      if [ "$TEST_COUNT" -gt 0 ]; then
        echo "✅ Found $TEST_COUNT tests. Running pytest..."
        poetry run coverage run -m pytest .
        poetry run coverage report -m
      else
        echo "⚠️ No runnable tests found. Skipping pytest."
      fi

  # pytest --collect-only : 테스트 수집
  # pytest --collect-only -q: 테스트 목록만 출력
  # grep -c '::': 테스트 개수 세기
  # poetry run pytest ... || true → 테스트 없어서 실패해도 정상 종료 처리 (최종 종료 코드는 0)
  # grep -c '::'로 실제 수집 가능한 테스트 개수를 정확히 판별

  # 테스트가 없는 경우 pytest는 종료 코드를 5로 반환합니다 → "수행할 테스트가 없음"
  # GitHub Actions는 0이 아닌 모든 종료 코드를 실패로 간주

  # pytest 종료 코드 (exit code)
  # 0	테스트 성공 (모든 테스트 통과)
  # 1	테스트 실패 (어떤 테스트든 실패함)
  # 2	사용법 에러 (예: 잘못된 인자)
  # 3	내부 에러
  # 4	pytest 플러그인 에러
  # 5	테스트 없음 (no tests collected)


## ch36 [MySQL Ver.]MySQL로 meeting 생성 구현하기

참조
notion/part2/Mysql 로 meeting 생성 구현하기/(mysql) mysql 로 meeting 생성 구현하기

미팅 모델을 생성하는 서비스 구현
app/services/meeting_service_mysql.py 생성

서비스 라우터에 연결
app/apis/v1/meeting_router.py 수정

테스트가 성공하는지 검증

프로젝트폴더/conftest.py

generate_config 임포트 잘 안되서 직접 입력
from tortoise.backends.base.config_generator import generate_config

# 강의랑 다르게 라이브러리를 최신버전으로 설치했더니 여기서 타입 에러가 남.
# 강의에선 여기서 경고만 나옴
# type: ignore추가
@pytest_asyncio.fixture(autouse=True, scope="session")  # type: ignore
def event_loop() -> None:
    pass

## type: ignore란?
# mypy(또는 다른 타입 체커)에게
# "이 줄의 타입 오류는 무시해 줘"
# 라고 명시적으로 지시하는 주석입니다.

## 주의할 점
# 무분별하게 남용하면 타입 검사 무의미
# → 진짜 오류도 묻히는 경우가 생김
# 가능한 경우, # type: ignore[code]

# pyproject.toml
# [tool.pytest.ini_options]
# filterwarnings=["ignore::DeprecationWarning"] # 경고 끄는 옵션 추가

# 강의에서 event loop를 재정의 한 것 때문에 문제가 생기는 것을 해결하기 위해 pytest 설정 추가

Deprecation Warning 끄기
pyproject.toml
filterwarnings=["ignore::DeprecationWarning"]


## ch37

참조
notion/part2/Mysql 로 meeting 생성 구현하기/(mysql) ci 에 mysql 추가

.github/workflows/ci.yml 수정

  test:
    runs-on: ubuntu-22.04
    env:  # 추가!
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: 1234
      MYSQL_DATABASE: when2meet_vod


      # /etc/localtime 파일은 현재 시스템의 시간대 정보를 담고 있는 심볼릭 링크. 이 파일을 삭제해서 시간대 설정을 초기화하려는 의도
      # sudo ln -s 새롭게 한국 시간대(KST) 에 맞는 타임존 파일을 /etc/localtime에 심볼릭 링크로 연결
      - name: Set timezone to KST
        run: |  # | 뒤에 오는 줄들은 모두 한 덩어리의 스크립트로 실행됩니다 (여러 줄 가능)
          sudo rm /etc/localtime
          sudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime

      # 깃허브에는 mysql이 이미 설치 되어 있어서 실행만 하면됨.
      - name: Start Mysql
        run: |  # | (파이프라인) 은 yaml 문법인데, value 를 multi-line 으로 쓰고 싶을때 사용합니다.
          sudo systemctl start mysql
          mysql -e "use mysql; FLUSH PRIVILEGES; ALTER USER '${{ env.MYSQL_USER }}'@'localhost' IDENTIFIED BY '${{ env.MYSQL_PASSWORD }}';" -uroot -proot
          mysql -e 'CREATE DATABASE ${{ env.MYSQL_DATABASE }};' -u${{ env.MYSQL_USER }} -p${{ env.MYSQL_PASSWORD }}

      #mysql -e
      #→ MySQL 커맨드라인 클라이언트를 실행하며 -e 옵션은 즉석에서 쿼리를 실행합니다.
      #
      #"use mysql; ..."
      #→ 먼저 시스템 DB인 mysql을 사용한 후, 권한 갱신 및 사용자 비밀번호를 변경합니다.
      #
      #FLUSH PRIVILEGES;
      #→ 권한 변경 사항을 MySQL에 즉시 반영합니다.
      #
      #ALTER USER ... IDENTIFIED BY ...
      #→ 환경 변수 ${{ env.MYSQL_USER }} 와 ${{ env.MYSQL_PASSWORD }}를 사용해
      #해당 사용자에 대해 비밀번호를 재설정합니다.
      #(CI 환경에선 초기 사용자 세팅이 필요하기 때문에 이 설정이 중요합니다)
      #
      #-uroot -proot
      #→ MySQL의 root 계정으로 로그인합니다. 비밀번호는 root.

