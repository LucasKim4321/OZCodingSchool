
-------------------------------------------------
Day2 백엔드 개발자를 위한 테스트 환경 구축
-------------------------------------------------

# Pytest

  - pytest는 파이썬에서 테스트 코드를 쉽게 작성하고 실행할 수 있게 도와주는 테스트 프레임워크

  ## pytest 설치

    poetry add --group=dev pytest
    poetry add --group=dev pytest===8.3.4


# pytest 사용시
# 함수 이름 앞에 test_라고 써주면 test 함수인걸 인식한다.

# 파이참에서 pytest 함수를 만들면 테스트 실행버튼이 생긴다.
# 터미널에서 테스트 실행 시 pytest . 이렇게 입력하면 됨.
def test_simple() -> None:
    print("Testing simple")
    

실행하는 방법은 다음과 같습니다. (둘 중 하나를 선택하시면 됩니다.)
  - 함수 왼쪽의 초록색 삼각형을 누른 후, run 을 선택합니다.
  - 터미널에서 pytest . 을 실행합니다.

단위테스트는 우리가 작성한 코드가 “예상한 대로 동작하는지” 검증합니다.
단위 테스트를 실행하는 도중에 한 번도 예상하지 못한 에러가 발생하지 않았다면 테스트는 “성공”으로 간주되고, 반대로 예상치 못한 에러가 발생했다면 테스트는 실패로 간주됩니다.
위 test_simple() 은 아무것도 검증하지 않지만, 실행 과정 도중에 에러가 발생하지 않고 끝까지 실행되기 때문에 성공한 테스트로 간주됩니다.

실제 테스트에서 무엇이든 검증하고자 할 때에는 assert 를 사용하면 됩니다.
단순 print 대신 조금 더 복잡한 예시를 들어보겠습니다.

▶ test_simple.py
  - 두 정수를 더하는 함수 add(a: int, b: int) -> None 을 정의했습니다.
  - test 함수에 3가지 step 이 추가되었습니다.

# test_st05_simple.py

# pytest 사용시
# 함수 이름 앞에 test_라고 써주면 test 함수인걸 인식한다.

# 파이참에서 pytest 함수를 만들면 테스트 실행버튼이 생긴다.
# 터미널에서 테스트 실행 시 pytest . 이렇게 입력하면 됨.
def test_simple() -> None:
    print("Testing simple")

    # 0으로 무언갈 나눌 수 없기 때문에 ZeroDivisionError 오류가 난다.
    # print(1/0)

    # 에러 발생을 예상했고 거기에 따른 예외 처리도 했기 때문에 무사히 넘어갈 수 있다.
    try:
        1/0
    except ZeroDivisionError:
        print("Division by zero")

# 제품 코드
def add(a: int, b: int) -> int:
    return a + b

# 테스트 코드
def test_add() -> None:
    # Given : 재료를 준비합니다.
    # 버그는 "경계"를 좋아합니다.
    # int의 경우에는 -1, 0, 1
    a, b = 1, 2

    # When : 테스트 대상이 되는 함수를 호출합니다.
    result = add(a, b) # result의 타입은 int

    # Then :
    assert result == 3



# assert 1+1 == 3  # 에러
# assert 1+1 == 3, "계산이 틀렸습니다"  # 에러 감지시 에러문 표시


st_06 test_delivery.py

from datetime import datetime, timedelta

# literal을 쓰지 않고 상수를 쓰는 이유
# 2라는 숫자에 "배송일"이라고 표기하기 위해
# (미래의 동료, 미래의 나)에게 알려주는 역할
# magic number를 쓰지 말자
DELIVERY_DAYS = 2

# 매직 넘버(Magic number)는
# 코드에서 하드 코딩된(literal value) 일정한 값을 의미하는 숫자나 문자열 등을 의미합니다.
# 매직넘버는 코드 내에서 여러 곳에서 사용되지만 이 값의 의미나 목적은 코드에서 명확하게 알려지지 않습니다.
# 매직 넘버는 가독성이 떨어지고 유지보수가 어렵게 만들며, 예상치 못한 버그를 발생시키는 원인이 될 수 있습니다.
# 따라서 매직 넘버 대신에 상수나 변수를 사용하는 것이 좋습니다.
# 변수나 상수를 사용하면 값을 변경할 때 일괄적으로 변경할 수 있으므로 코드의 유지보수성과 가독성이 향상됩니다.

# 제품 코드
def _is_holiday(day: datetime) -> bool:
    "Return day of the week, where Monday == 0 ... Sunday == 6."
    return day.weekday() == 6  # 일요일이면 True

def get_eta(purchase_date: datetime) -> datetime:
    current_date = purchase_date
    remaining_days = DELIVERY_DAYS

    while remaining_days > 0:
        current_date += timedelta(days=1)
        if not _is_holiday(current_date):
            remaining_days -= 1

    return current_date

# 테스트 코드
def test_get_eta_2023_12_01() -> None:
    # Given : 재료를 준비합니다.
    order_date = datetime(2023,12,1)

    # When : 테스트 대상이 되는 함수를 호출합니다.
    result = get_eta(order_date)

    # Then : 결과
    assert result == datetime(2023,12,4)

def test_get_eta_2024_12_31() -> None:
    """
    실전에서는 공휴일 API를 호출해서 공휴일까지 계산
    공휴일 정보가 없어서 1월 1일도 평일로 취급
    """

    result = get_eta(datetime(2024,12,31))
    assert result == datetime(2025, 1, 2)

def test_get_eta_2024_02_28() -> None:
    result = get_eta(datetime(2024, 2, 28))
    assert result == datetime(2024, 3, 1)

def test_get_eta_2023_02_28() -> None:
    result = get_eta(datetime(2023, 2, 28))
    assert result == datetime(2023, 3, 2)

# Xunit 계열 테스트와 단위테스트의 역사
# 우리가 배운 단위 테스트를 Xunit 계열 테스트 라고도 부릅니다.
# 단위테스트의 시초는 켄트백(Kent Beck)이 처음 Small Talk 에서 작성한 SUnit 으로 알려져 있습니다.
# 이후 켄트백 본인이 Eric Gamma 라는 개발자와 함께 Java 에도 단위테스트 프레임워크인 Junit 을 만들었고 Junit 은 대성공했습니다.
# 그 이후 비슷한 프레임워크들이 ?Unit 이라는 이름으로 수많은 다른 언어에 (파이썬에는 내장 라이브러리인 unit test 와 pytest 가 있습니다) 퍼져나가게 됩니다.


-------------
Coverage
-------------

Coverage(커버리지)는
소프트웨어 테스트에서 테스트가 코드의 어느 부분까지 실행했는지를 측정하는 지표입니다.
즉, **"내가 작성한 테스트가 실제 코드 중 얼마나 많은 부분을 검사하고 있는가?"**를 수치로 보여줍니다.

  쉽게 말하면 전체 코드가 100줄인데, 테스트를 돌려봤더니 70줄만 실행됐다면
  → 커버리지는 70%입니다.

Coverage 설치
poetry add --group=dev coverage
poetry add --group=dev coverage==7.6.9

coverage, 왜 필요한가?

저는 coverage 측정이 없는 단위테스트는 반쪽짜리 단위테스트라고 생각합니다.
지금부터 coverage가 무엇인지, 왜 사용해야 하며, 어떻게 사용해야 하는지 예제와 함께 알아보겠습니다.

▶ temp.py

커버리지의 정의는 다음과 같습니다.

  (테스트 도중 한 번이라도 실행된 제품 코드) ÷ (전체 제품 코드)

(좀 더 깊게 들어가면 구문 커버리지, 분기 커버리지 등 커버리지도 종류가 많은데요, 지금은 생각하지 않도록 합시다.)

그렇다면 위 temp.py 를 pytest로 실행했을 때 실행되는 코드와 실행이 안되는 코드는 각각 무엇일까요?
코드 라인 넘버로 대답해 봅시다.

직접 실행하기 전에 각각 답을 내었다면, 이제 실행해 봅시다.

다음 명령어를 실행하면 커버리지를 측정하면서 테스트를 수행합니다.


# 예제 st07_coverage.py.py, test_st07_coverage.py

def add(a: int, b: int) -> int:
    return a + b

def mul(a: int, b: int) -> int:
    return a * b

def test_add() -> None:
    # Given
    a, b =  1, 1

    # When
    result = add(a,b)

    # Then
    assert result == 2

(테스트 도중 한 번이라도 실행된 제품 코드) / (전체 제품 코드)

coverage 설치
poetry add --group=dev coverage

pytest를 사용해 coverage를 실행
poetry run coverage run -m pytest st07_coverage.py.py

보고서 작성
-m, --show-missing
Show line numbers of statements in each module that weren't executed.
poetry run coverage report -m


결과 : 총 8줄 중에 5번 줄 한줄이 실행 되지 않았음을 의미
test 코드도 포함되서 계산됨.
Name           Stmts   Miss  Cover   Missing
--------------------------------------------
st07_coverage.py.py       8      1    88%   5
--------------------------------------------
TOTAL              8      1    88%

test 코드는 포함 되지 않게 설정
*/test_*.py 어느 경로든 'test_.py'라는 이름이 앞에 포함되면 제외
[tool.coverage.run]
omit = ["*/test_*.py"]

테스트 코드를 블록 설정한 다음에 -> 우클릭 refactor -> move 하면
코드만 따로 때서 파일을 하나 만듬.

때어낸 파이썬 코드를 테스트
poetry run coverage run -m pytest test_st07_coverage.py

확인해보면 테스트 코드가 제외되고 실행됨
poetry run coverage report -m

 3/4 75%
커버리지가 75%로 감소했지만 이게 정상.
커버리지는 높을 수록 좋음.
Name           Stmts   Miss  Cover   Missing
--------------------------------------------
st07_coverage.py.py       4      1    75%   5
--------------------------------------------
TOTAL              4      1    75%

poetry run coverage html
htmlcov 폴더가 생김
index.html을 열어보면 결과가 웹페이지에 보기좋게 표시됨.

## 정리

  - 단위 테스트를 전부 실행해도 한 번도 실행되지 않은 코드는 곧 테스트를 안한 코드다.
  - 테스트 안 된 지점에서 버그가 나면 할 말이 없다. (테스트 안 한 개발자의 잘못)
  - 따라서 커버리지 계산을 통해 “지금 내가 수정한 코드가 제대로 테스트 되고 있는가” 를 판단할 필요가 있다.
  - 커버리지의 정의는 (테스트 도중 한번이라도 실행된 제품코드) ÷ (전체제품코드) 이다.
  - 커버리지를 계산할 때 테스트 코드는 omit 하고, 제품 코드만 계산에 들어가도록 해야 한다.

  - 커버리지 실행을 하려면
    - poetry run coverage run -m pytest .
    - poetry run coverage report -m
    - poetry run coverage html
  을 하면 됩니다.


----------------
Dev dependency
----------------

▶ dev dependency

    지금까지 group=dev를 사용해서 라이브러리들을 설치하였습니다. 이 group=dev는 어떤 의미일까요?

    ▶ pyproject.toml

    종속성은 2가지로 나눌 수 있습니다.
      - 서버가 실행되는 중에 필요한 종속성 (예: fastapi, uvicorn, pydantic)
      - 개발하는 중에만 필요하고, 서버가 실행되는 도중에는 전혀 사용되지 않는 종속성

    group=dev → “이 종속성은 개발할 때만 필요하고, 서버가 실행될 때에는 필요하지 않다” 라는 의미입니다.
    따라서 지금까지 black, ruff, mypy, pytest, coverage 등을 모두 dev group으로 지정하여 설치하였습니다.

    이렇게 종속성을 분리해서 관리하면 프로덕션 환경에서 “쓰지 않을 종속성”을 설치하느라 시간과 공간을 낭비할 필요가 없어집니다.
    특히 ec2 환경보다는 docker 환경에서(kubernetes) 종속성 분리가 빛을 발합니다.
      - 매번 업데이트 시마다 docker 이미지를 새로 빌드하는데, 이미지 사이즈 자체가 줄어드니 저장 비용이 감소합니다.
      - 매번 배포시마다 새 이미지를 다운받고 실행하는데, 이때도 사이즈가 작으면 더 빠르게 배포할 수 있습니다.

    dev group 을 제외하고 설치를 하려면 poetry install --no-root --only main 을 하면 됩니다.

      - no-root: poetry 기본 설정은 프로젝트를 어플리케이션(회사가 직접 사용할 서버 등등.다른 사람이 가져가라고 만든 것이 아님)이 아니라
                 라이브러리(다른 사람이 가져다 쓸 수 있도록 만든 프로그램)로 간주하는데요,
                 no-root 옵션을 사용해야 어플리케이션으로 인식해서 자기 자신(root) 을 설치하지 않습니다.
                 (참고: 🧷 Commands | Documentation | Poetry - Python dependency manage...)

      - only main: dev group이 아닌 main 그룹만 설치하겠다는 의미입니다.


자동화 테스트가 필요한 이유
테스트야 말로 기술자산입니다.

    기술부채라는 말 들어보셨나요? 개발하면서 내린 나쁜 의사결정이 빚처럼 쌓여서 결국 프로젝트를 파멸로 이끈다는 말이죠.

    수 만 줄이 넘는 어플리케이션의 일부분을 수정했을 때, 그 일부분이 버그 없이 여러분이 예상하는 대로 동작할 것이라고 어떻게 보장할까요?
    자동화 테스트야 말로 여러분이 "수정"을 두려워 하지 않도록 만들어주는 강력한 무기입니다.

    마틴파울러는 그의 저서 리팩토링(2판) 에서 다음과 같이 말했습니다.

    테스트 슈트가 없으면 개발자는 자신이 수정한 코드가 제대로 동작하는지 확인할 방법이 없다.
    테스트 슈트가 없으면 시스템 이쪽을 수정해도 저쪽이 안전하다는 사실을 검증하지 못한다.
    그래서 결함율이 높아지기 시작한다. 의도하지 않은 결함 수가 많아지면 개발자는 변경을 주저한다.

    제가 처음 있었던 스타트업에서는 자동화 테스트가 없었는데요, 배포 전에 늘 전 직원이 상품을 결제해보고 일이 환불행사였습니다.
    그런데 이런 일이 반복되다 보니까 점점 하기 싫은 일이 되더라구요. 점점 빨리, 대충 하게 되고 결제의 모든 경우의 수를 커버하기가 어려워졌습니다.
    어느 날 결제가 안되는 버그를 제가 만들었습니다. 그러나 테스트가 없었기 때문에 고객으로부터 "결제가 안 돼요"라는 문의전화가 오고 나서야 그 일을 알게 되었죠.

    그때가 되면 이미 늦었습니다. 고객에게 안 좋은 경험이 일어난 것이죠.
    이런 일이 반복되면 점점 코딩을 하는게 두려워 집니다. 지금 잘 돌아가는 코드에서 아주 조금만 수정을 해도 어디에서 버그가 발생하는지 도무지 알 수가 없는 것이죠
    테스트는 여러분이 작성한 코드가 의도한 대로 동작하는지를 검증해 줍니다. 사람이 아니라 코드로 코드를 검증하기 때문에 반복적으로 실행하는데 아주 유리합니다.
    컴퓨터는 실수도 하지 않고, 반복되는 작업에 지치는 일도 없기 때문입니다.
    결과적으로 테스트는 개발자가 “수정을 두려워하지 않도록 만들어줍니다.” 이것이 여러분에게 테스트가 필요한 이유입니다.

    테스트 스크립트 작성
▶ pytest_asyncio 설치와 설정
  poetry add --group=dev pytest-asyncio
  poetry add --group=dev pytest-asyncio==0.25.0

▶ pyproject.toml

    # 초략
    [tool.pytest.ini_options]
    asyncio_mode = "auto"
    asyncio_default_fixture_loop_scope = "session"

  아직 async test 를 만든적은 없지만, 미리 추가해두겠습니다.

  pytest는 기본적으로 async test 를 무시하는데, pytest-asyncio 플러그인을 사용하면 async 함수도 실행할 수 있습니다.

  async 가 무엇인지는 추후에 자세하게 다루려고 합니다. (깊은 원리를 이해하는게 상당히 복잡한데, 원리를 다 알면 모든 강의를 따라갈 수 있습니다.)

▶ test.sh 생성

  지금까지 설치한 모든 CI 도구들을 한 번에 실행해주는 스크립트를 만들어보겠습니다!

  #! : 시뱅이라고 부름

  shell
    #!/usr/bin/env bash       
    set -eo pipefail

    COLOR_GREEN=`tput setaf 2;`
    COLOR_NC=`tput sgr0`; # No Color

    echo "Starting black"
    poetry run black .
    echo "OK"

    echo "Starting ruff"
    poetry run ruff check --select I --fix
    poetry run ruff check --fix
    echo "OK"

    echo "Starting mypy"
    poetry run mypy .
    echo "OK"

    echo "Starting pytest with coverage"
    poetry run coverage run -m pytest
    poetry run coverage report -m
    poetry run coverage html
    echo "OK"

    echo "${COLOR_GREEN}ALL tests passed successfully!${COLOR_NC}"


# 예제 test_st08_pytest_asyncio.py

오류없이 코딩 후
코드 포매터로 포메팅
black .

$? 가장 최근에 실행된 명령어의 종료 상태(exit code)를 출력하는 명령어입니다.
echo $?

출력 0 문제 없음
0 이상이면 문제 있음

오류가 있는 코드를 짠 후
black .

echo $? 

출력이 0보다 크면 문제있음.


./test.sh

chmod +x ./test.sh



test.ps1 생성 (윈도우 powershell 사용자를 위해서)

주의: 윈도우는 다양한 터미널이 있는데요, (cmd, powershell, WSL) powershell 에서만 동작하는 ps1 파일입니다. (powershell 을 권장합니다!)

    powershell
        poetry run black .
        if(!$?) { throw }

        poetry run ruff check --select I --fix
        if(!$?) { throw }

        poetry run ruff check --fix
        if(!$?) { throw }

        poetry run mypy .
        if(!$?) { throw }

        poetry run pytest .
        if(!$?) { throw }

Write-Host "Done" -ForegroundColor Green
# refer: https://stackoverflow.com/questions/47032005/why-does-a-powershell-scr





Github action
github action 스크립트 생성

매번 github 에 push 할 때마다 black 부터 pytest 까지 모든 검사가 자동으로 실행되도록 만들어 보겠습니다.

▶ .github/workflows/ci.yml
    name: CI

    on:
    push:

    jobs:
    static-analysis:
        runs-on: ubuntu-22.04
        steps:
        - name: Check out the codes
            uses: actions/checkout@v2

        - name: Setup python environment
            id: setup-python
            uses: actions/setup-python@v2
            with:
            python-version: "3.13"

        - name: Install Poetry
            run: |
            curl -sSL https://install.python-poetry.org | python3 - --version

        - name: Register Poetry bin
            run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

        - name: Install dependencies
            run: poetry install --no-root

        - name: Run Black
            run: poetry run black . --check

        - name: Run Ruff
            run: |

on: push → 액션이 언제 실행되는지를 정의합니다. on: push 라면, push 할 때마다 실행합니다.
https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#on

jobs → 하나의 workflow 는 여러개의 job 으로 구성됩니다.
https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobs

2개의 job 을 생성했습니다. static-analysis 와 test job 을 2개로 쪼갠 이유는 실행 속도를 개선하기 위해서 입니다. 프로젝트가 점점 커지게 되면 가장 오래 걸리는 작업이 mypy 실행과 전체 단위 테스트 실행인데, 이 둘을 서로 쪼개 병렬로 실행하면 전체 CI 가 더 빨리 끝납니다.

runs-on → job 이 실행되는 machine 을 의미합니다.
https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idruns-on

steps → 하나의 job 은 여러개의 step 으로 구성됩니다. step 은 명령을 실행하거나 다른 action 을 실행합니다.

uses → 실행할 action 을 가리킵니다.

with → action 에 전달할 parameter 변수입니다.

run → 실행할 명령어입니다.

run: | yaml 문법입니다. | (파이프라인)을 사용해 value 가 여러 줄 (multiline) 이라는 것을 의미합니다.


name: CI

on:   # 스크립트 실행 조건 설정
  workflow_dispatch:  # 수동으로 실행 가능한 워크플로우를 정의
                      # push, pull_request처럼 자동 실행되지 않고,
                      # GitHub 웹 UI에서 "Run workflow" 버튼을 눌러야 실행됩니다.
  pull_reqeust:   # pull_reqeust가 일어날 때
  push:   # push할 때

jobs:  # 할 일 설정.  여러개 설정 가능
# jobs 실행 순서 설정 가능


name: CI

on:
  push:


jobs:
  static-analysis:  # mypy, black, ruff 등 정적 분석
    runs-on: ubuntu-22.04  # 가상 운영체제 환경에서 실행됨. 실제 프롣덕션(배포)환경에서는 모든 버전을 고정하는 것이 좋다.
    # 예기치 못하게 버전이 올라가서 장애가 생기는 것을 막기 위해 버전을 고정
    steps:
      # 가장 최신 브랜치와 커밋을 가져옴
      - name: Check out the codes
        uses: actions/checkout@v2

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 2.1.2

      # poetry를 사용하기 위해 설정
      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-root

      # 코드 포메터 (black)으로 체크만 함.
      - name: Run Black
        run: poetry run black . --check

      - name: Run Ruff
        run: |
          poetry run ruff check --select I
          poetry run ruff check

      - name: Run Mypy
        run: poetry run mypy .


  test:   # 전체 테스트 실행
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the codes
        uses: actions/checkout@v2

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.13"

      # key와 path는 필수
      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v2
        with:
          key: poetry-2.1.2
          path: ~/.local/   # poetry는 ~/.local에 설치되므로, 이 디렉터리를 통째로 캐시할 것입니다.

      - name: Install Poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 2.1.2
 
      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run tests
        run: |
          poetry run coverage run -m pytest .
          poetry run coverage report -m



GitHub Actions에서 uses와 run의 차이점은 재사용 가능한 액션을 호출하는지, 직접 명령어를 실행하는지의 차이에 있습니다.

uses: 재사용 가능한 액션 호출
특징
GitHub 또는 커뮤니티에서 만든 **미리 정의된 작업(step)**을 가져다 쓰는 방식입니다.

owner/repo@version 또는 actions/xxx@v2 형식으로 작성합니다.

보통 복잡한 로직을 캡슐화해두었기 때문에 직접 작성하지 않고도 필요한 기능을 쉽게 쓸 수 있습니다.

run: 셸 커맨드를 직접 실행
특징
리눅스 셸 명령어(bash, sh, zsh 등)를 직접 입력해서 실행합니다.

시스템 명령어, Python 명령어, 스크립트 실행 등 자유롭게 작성할 수 있음.

