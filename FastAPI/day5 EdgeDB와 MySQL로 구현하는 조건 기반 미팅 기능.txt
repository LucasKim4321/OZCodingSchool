
-------------------------------------------------
Day5 EdgeDB와 MySQL로 구현하는 조건 기반 미팅 기능
-------------------------------------------------

## ch38 meeting 조회의 요구사항

참조
notion/part2/meeting 조회 구현하기/meeting 조회의 요구사항

meetifyr 은 여러명이 동시에 같은 meeting 을 수정할 수 있습니다.

- 현재 meetifyr 에서는 동시에 2개의 창을 띄워서 수정을 하면 A 창에서 만든 수정사항이 B 창에서 보이지 않습니다.
- 이는 잠재적인 버그를 만들 수 있습니다.
- 한 사용자의 변경사항을 다른 사용자에게 실시간으로 전파하기 위해서는 websocket, long polling 과 같은 기술이 별도로 필요합니다. (http 만으로는 가능은 하지만 비효율적)
- 각 변경 요청의 응답으로 “가장 최신의 meeting” 을 응답하는 방식으로 완벽하게는 아니지만 대응이 가능합니다.


B ->> Meetifyr: 처음으로 Meetifyr 사이트에 진입. 미팅 조회
Meetifyr -->> B: 최신의 Meeting 상태 응답

A ->> Meetifyr: 자신의 일정을 변경
Meetifyr -->> A: 가장 최신의 meeting 상태를 응답

B ->> Meetifyr: 자신의 일정을 변경
Meetifyr -->> B: 직전의 A의 변경사항을 포함해 가장 최신의 Meeting 을 응답

따라서…
- 매 번 처음 페이지를 열 때마다 호출 될 “미팅 조회 API 를 생성”
- 이 후 변경 API 가 호출될 때 마다 변경 직후에 미팅 조회 service 를 호출해 가장 최신의 meeting 을 반환하도록 하겠습니다.


## ch39 meeting 조회의 요구사항

참조
notion/part2/meeting 조회 구현하기/dmypy (mypy daemon) 사용하기

지금까지 로컬에서 개발할때 `mypy` 명령을 그대로 사용했습니다.
이는 매 번 mypy를 실행할 때 마다 mypy 프로세스를 새로 켜고, 검사가 끝나면 프로세스를 종료해야 하는데, 비효율적입니다.
어짜피 자주 검사한다면 프로세스를 띄워두고 검사가 필요할때마다 요청하면 매 번 프로세스를 껐다 켜는 오버헤드를 줄일 수 있습니다.
이를 위해 mypy 는 daemon 모드를 지원합니다.

https://mypy.readthedocs.io/en/stable/mypy_daemon.html

Mypy daemon (mypy server)

mypy를 커맨드라인 도구로 실행하는 대신, 서버(데몬) 프로세스로 실행할 수도 있습니다.
그런 다음 커맨드라인 클라이언트를 통해 타입 체크 요청을 서버로 전송할 수 있습니다.
이 방식은 mypy가 이전 실행 결과를 메모리에 유지하므로,
매번 파일 시스템에서 다시 읽을 필요 없이 훨씬 빠르게 타입 체크를 할 수 있습니다.

또한 서버는 더 정밀한 의존성 추적을 사용하여,
변경된 부분만 검사하는 등, 전체 분석 작업량을 줄입니다.

만약 코드베이스가 크고, 자주 mypy를 돌린다면,
이 데몬 방식은 기존보다 10배 이상 빠를 수 있습니다.
특히 코드 수정 후 자주 타입 검사를 하는 워크플로우에서 매우 효과적입니다.
이렇게 하면 오류를 더 빨리 발견할 수 있기 때문입니다.

📝 요약
mypy를 데몬 서버(dmypy)로 실행하면, 이전 실행 결과를 메모리에 저장해두고 변경된 부분만 빠르게 검사할 수 있어,
반복 실행 시 속도가 기존보다 10배 이상 빨라집니다. 특히 대규모 프로젝트나 자주 타입 검사를 수행하는 워크플로우에 효과적입니다.

test.sh 수정

echo "Starting mypy"
poetry run dmypy run -- .
echo "OK"

테스트 실행하면 .dmypy.json 생기는데
.gitignore에 추가
.dmypy.json


main.py 제거

이제는 필요 없어진 main.py 와 test_temp.py, temp.py를 제거합니다.


## ch40 meeting 조회 api스펙 생성

참조
notion/part2/meeting 조회 구현하기/meeting 조회 api 스펙 생성


meeting 을 조회하는 api 스펙
현재는 url_code 만 리턴하지만 추후에는 meeting 이 가지고 있는 시작 날짜, 끝 날짜 그리고 참가자 목록까지 리턴하게 됩니다.


# frozen_config.py 생성
데이터 처리 중간에 실수로 값이 바뀌는 걸 방지하기 위해서 사용

rom pydantic import ConfigDict

FROZEN_CONFIG = ConfigDict(frozen=True)

# frozen -> 얼어 있다.
# 얼어있는 객체 -> 생성 이후에는 변경할 수 없는 객체
# immutable

# my_set = frozenset()  # add() 불가능
# my_set = set()  # add() 가능
# my_set.add(1)


# app/dtos/get_meetng_response.py 생성

from pydantic import BaseModel
from app.dtos.frozen_config import FROZEN_CONFIG

class GetMeetingResponse(BaseModel):
    model_config = FROZEN_CONFIG  # 한번 생성하면 재할당 되지 않도록 FROZEN_CONFIG 설정

    url_code: str


# app/apis/v1/meeting_router.py 수정

from app.dtos.get_meeting_response import GetMeetingResponse

# 추가
@edgedb_router.get(
    "/{meeting_url_code}",  # path variable
    description="meeting 을 조회합니다.",
)
async def api_get_meeting_edgedb(meeting_url_code: str) -> GetMeetingResponse:
    return GetMeetingResponse(url_code="abc")

@mysql_router.get(
    "/{meeting_url_code}",
    description="meeting 을 조회합니다.",
)
async def api_get_meeting_mysql(meeting_url_code: str) -> GetMeetingResponse:
    return GetMeetingResponse(url_code="abc")


asgi.py 실행

swagger 테스트
http://0.0.0.0:8000/docs

/v1/mysql/meetings/{meeting_url_code} 테스트

1 입력 후 execute

터미널에 입력
curl -X 'GET' \
  'http://0.0.0.0:8000/v1/mysql/meetings/abc' \
  -H 'accept: application/json'


## ch43 [MySQL Ver.]Tortoise-ORM으로 Meeting 조회 테스트 작성 및 API 구현

notion/part2/meeting 조회 구현하기/(mysql) 조회 쿼리 추가

단축키 : 시프트 두번 누르고 파일 검색 가능
app/tortoise_models/meeting.py

  @classmethod  # 추가
    async def get_by_url_code(cls, url_code: str) -> MeetingModel | None:
        return await cls.filter(url_code=url_code).get_or_none()


notion/part2/meeting 조회 구현하기/(mysql) 테스트 작성과 구현

app/tests/apis/v1/test_meeting_router_mysql.py

class TestMeetingRouter(TestCase):
    # 추가
    async def test_api_get_meeting_mysql(self) -> None:
        async with httpx.AsyncClient(
            transport=httpx.ASGITransport(app=app),
            base_url="http://test",
        ) as client:
            meeting_create_response = await client.post("/v1/mysql/meetings")

API요청을 통해서 생성하면 모든 validation을 거처서 생성 되기 때문에 권장함.
self.assertEqual() 커맨스 클릭해서 파일을 열어 본 후 커맨드 7 눌러보면 스트럭처가 나옴.


서비스 구현
app/services/meeting_service_mysql.py 추가

    async def service_get_meeting_mysql(url_code: str) -> MeetingModel | None:
        return await MeetingModel.get_by_url_code(url_code)

router 구현
app/apis/v1/meeting_router.py 수정

    # 수정
    @mysql_router.get(
        "/{meeting_url_code}",  # path variable
        description="meeting 을 조회합니다.",
    )
    async def api_get_meeting_mysql(meeting_url_code: str) -> GetMeetingResponse:
        meeting = await service_get_meeting_mysql(meeting_url_code)
        if meeting is None:
            raise HTTPException(
                status_code=HTTP_404_NOT_FOUND, detail=f"meeting with url_code: {meeting_url_code} not found"
            )
        return GetMeetingResponse(url_code=meeting.url_code)


HTTPException 커맨드 클릭 후 파일 보기
프로젝트 폴더 옆에 ...에 behavior/always select opened file

추가 테스트 구현 (404)

app/tests/apis/v1/test_meeting_router_mysql.py

        async def test_api_get_meeting_mysql_404(self) -> None:

            async with httpx.AsyncClient(
                transport=httpx.ASGITransport(app=app),
                base_url="http://test",
            ) as client:
                # Given
                invalid_url_code = "invalid_url_code"

                # When
                response = await client.get(f"v1/mysql/meetings/{invalid_url_code}")

            # Then
            self.assertEqual(response.status_code, HTTP_404_NOT_FOUND)
            response_body = response.json()
            self.assertEqual(response_body["detail"], "meeting with url_code: invalid_url_code not found")

서버 실행 후 터미널에서 테스트
asgi.py  run 해서 서버 실행
http://0.0.0.0:8000/docs에 들어가서 요청을 보내보면 curl 명령어를 보여줌
repeat 10 curl -X 'POST' \
  'http://0.0.0.0:8000/v1/mysql/meetings' \
  -H 'accept: application/json' \
  -d ''
코드 10번 반환함

db/console
SELECT created_at, url_code, id
FROM meeting WHERE url_code='hV4AEALrWXtyQgsiwGMVQe';
-- 우클릭 Explain plan -> Explain plan (ROW)
-- 또는
-- 우클릭 Explain plan -> Explain Analyse (값을 확인 할 수 없어서 위에 걸로 함.)
-- key값이 있으면 조회 쿼리가 index 를 사용한다는 것을 query plan 으로 확인했음.


정리

- 조회 API 를 구현했습니다.
- 404 에 대한 테스트도 추가했습니다.
- explain plan 으로 쿼리가 인덱스를 사용한다는 점도 확인했습니다.


## ch44 [MySQL Ver.]MySQL Query Log 조회하기

notion/part2/meeting 조회 구현하기/(mysql) mysql query log 조회하기

정리:

- mysql 에서 `general_log` 를 확인하는 방법을 배웠습니다.
- `get_or_none()` 이 `LIMIT 2` 를 사용한다는 점을 배웠습니다.
    - 2개 이상일 때 에러를 일으키기 위해서 LIMIT 2 로 1개가 나오는지, 2개가 나오는지 검사합니다.


## ch45 Meeting 날짜 업데이트 요구사항

참조
notion/part2/Meeting 날짜 update 구현 (patch)/meeting 날짜 업데이트

웹사이트 참조
http://www.meetifyr.com/


## ch46 Meeting 날짜 업데이트 dummy API 추가

참조
notion/part2/Meeting 날짜 update 구현 (patch)/dummy api 추가

# DTO생성

# 수정 요청을 받을 dto 를 생성
# 클라이언트가 보낸 요청(Request Body)의 데이터를 받고 검증하는 역할
# app/dtos/update_meeting_request.py 생성

# 조회 응답을 보낼 dto를 생성
# 클라이언트에게 응답할 때의 데이터 구조를 정의
# app/dtos/get_meeting_response.py 생성

# router에 더미 데이터 추가
# app/apis/v1/meeting_router.py 수정


# mypy를 디버깅할 때 reveal_type 사용가능. import x
# reveal_type(GetMeetingResponse().start_date)
# mypy .  테스트시
# Revealed type is "Union[datetime.date, None]" 이런식으로 결과가 나옴
