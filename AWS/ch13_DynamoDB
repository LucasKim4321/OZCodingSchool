** DynamoDB **

완전관리형 클라우드 NoSQL 데이터베이스
  규모와 관계없이 10ms 미만의 지연 시간 보장
  유연한 데이터 모델, 용량 제한 없음
  안정적인 성능
  처리 용량 자동 조정 기능
  용량과 읽기/스기 유닛에 대하여 과금

Amazon DynamoDB Accelerator(DAX)
  가용성이 뛰어난 완전관리형 인 메모리 캐시
  초당 수백만 개의 요청에도 DynamoDB 응답 시간을 밀리초에서 마이크로초로 단축할 수 있음


* DynamoDB Read 방식 *

Eventually Consistency Read
  최근 완료된 쓰기 작업의 결과를 반영하지 않을 수 있음
  부실 데이터가 일부 포함될 수 있음
  잠시 후 읽기 요청을 반복하면 응답이 최신 데이터를 반환

Strongly Consistent Read
  성공한 모든 이전 쓰기 작업의 업데이트를 반영하여, 가장 최신 데이터로 응답을 반환
  네트워크 지연 또는 중단이 발생한 경우에 사용이 어려울 수 있음

DynamoDB 과금 방식
  데이터 스토리지
  읽기,쓰기 요청 건수


* 테이블 구성 *

Table
  Item들의 집합

Item
  Attribute들의 집합

Attribute
  Key-Value방식의 데이터
  Key는 문자열


* DynamoDB의 데이터 타입 *

스칼라 데이터 형식(하나의 값만 표현)
  Number(N) - 양수, 음수 또는 소수점, 최대 38자리 지원
  String(S) - UTF-8 이진 인코딩을 사용하는 유니코드
  Binary(B) - 압축 텍스트, 암호화 데이터, 또는 이미지 같은 모든 이진수 데이터 저장 가능
  Boolean(S, '0' 또는 '1') - True 또는 False를 저장할 수 있음
  Null(NULL) - 알려지지 않았거나 정의되지 않은 상태의 속성

문서 형식(내포 속성이 있는 복잡한 구조를 표현)
  List(L) - 순서가 지정된 값 모음을 저장할 수 있음
  Map(M) - 정렬되지 않은 이름-값 쌍의 모음을 저장할 수 있음

다중 값 형식(여러 스칼라 값을 표현)
  String Set(SS) - 문자열 집합
  Number Set(NS) - 숫자 집합
  Binary Set(BS) - 이진 집합


* DynamoDB 파티션 및 키 *
  
  파티션(Partition)
    DynamoDB가 데이터를 저장하는 곳
    SSD(Solid State Drive)로 백업되는 테이블용 스토리지 할당
    하나의 AWS 리전 내의 여러 가용 영역에 자동으로 복제됨
    직접 관리할 필요 없이 파티션 관리는 전적으로 DynamoDB에서 처리함
  
    특정 상황에서 추가 파티션을 할당
      기존 파티션이 지원할 수 있는 한도를 초과하여, 테이블의 할당된 처리량 설정을 늘리는 경우
      기존 파티션 용량이 다 차서 추가 스토리지 공간이 필요한 경우

  기본키(Primary Key)
    Table내에서 각 Item을 구분하는 고유 식별자
    단순 기본키 : 파티션 키만 사용
    복합 기본키 : 파티션 키와 정렬키를 함께 사용

  파티션키(Partition Key)
    내부 해시 함수에 대한 입력으로 파티션키 값을 사용
    출력에 따라 항목을 저장할 파티션이 결정됨

  정렬키(Sort Key)
    파티션키가 동일한 모든 항목들을 정렬하는 키 값


* DynamoDB 보조 인덱스 *
  
  로컬 보조 인덱스(Local Secondary Index, LSI)
    테이블과 파티션 키는 동일하지만 정렬키는 다른 인덱스
    정렬키(Sort Key)를 추가로 더 만든다고 생각하면 됨

  글로벌 보조 인덱스 (Global Secondary Index, GSI)
    파티션키 및 정렬키가 테이블의 파티션키 및 정렬키와 다를 수 있는 인덱스

  보조 인덱스 개수 제한
    테이블당 최대 20개의 GSI 및 5개의 LSI를 정의할 수 있음(일부 리전 제외)


** NoSQL (Non relational) 데이터베이스 **


* 특징 *

관계형 데이터베이스의 데이터 일관성 제약을 일부 완화
수평적으로 확장 가능한 성능
개발 용이성
짧은 지연 시간 및 복원력
스키마 없는 데이터 모델에 최적화
간단한 데이터 구조
다양한 데이터 모델을 사용
  열기반
  문서기반
  그래프
  인 메모리 키-값 스토어
빅데이터, 모바일 및 웹 애플리케이션에 매우 적합


* RDBMS와 NoSQL 비교 *

RDBMS
  데이터를 유연하게 쿼리 할 수 있음
  쿼리 비용이 상대적으로 높음
  트래픽이 많은 상황에서는 확장성이 떨어짐

NoSQL
  몇 가지 방법으로 데이터를 효율적으로 쿼리할 수 있음
  그 외에는 쿼리 비용이 높고 속도가 느림

                관계형 데이터 베이스(RDBMS)                    NoSQL 데이터 베이스
데이터 모델  스키마 강제 적용                         스키마 강제 적용하지 않음
          (행과 열로 구성된 테이블로 정규화)
ACID 속성   ACID 속성을 지원                       일부 ACID 속성을 지원
           (원자성,일관성,격리성,내구성)
성능        디스크 하위 시스템에 따라 다름              기본 하드웨어 클러스터 크기, 네트워크 지연 시간 등에 따라 다름
           (쿼리, 인덱스 및 테이블 구조 최적화 필요)
확장성       더 빠른 하드웨어 사용                    하드웨어의 분산 클러스터 사용 
API        SQL을 준수하는 쿼리 사용                 객체 기반 API (인 메모리 데이터 구조를 쉽게 저장 및 검색)
도구        다양한 도구 세트 제공                    클러스터 관리 및 조정을 위한 도구 제공


* ACID 속성이란? *
원자성(Atomicity) - 트랜잭션이 완전히 실행되거나 전혀 실행되지 않는 '모두 실행 또는 전혀 실행 되지 않음'을 의미
일관성(Consistency) - 트랜잭션이 커밋되면 데이터가 데이터베이스 스키마를 준수해야 함을 의미
격리성(Isolation) - 동시에 일어나는 트랜잭션들이 각기 별도로 실행되어야 함을 의미
내구성(Durability) - 예기치 못한 시스템 장애 또는 정전 시 마지막으로 알려진 상태로 복구하는 기능


* NoSQL 데이터베이스 유형 *

열기반 데이터베이스
  데이터의 행이 아닌 데이터의 열을 읽고 스는 데 최적화

문서 데이터베이스
  JSON 또는 XML 형식의 문서와 간ㅌ은 반정형 데이터를 저장하도록 설계됨

그래프 데이터베이스
  간선이라고 부르는 방향 링크와 장점을 저장

인 메모리 키-값 스토어
  인 메모리 캐싱은 핵싱 데이터 조각을 메모리에 저장해 액세스 지연 시간을 줄여주므로 애플리케이션 성능이 향상됨