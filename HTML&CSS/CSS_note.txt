---------------------------------------------
## CSS(Cascading Stylesheet) 캐스케이딩 스타일시트
---------------------------------------------

Cascading: 폭포같은, 계속되는, 연속적인
Style: 멋을 내다
Sheet : (종이나 문서) 한 장

-> 연속적으로 스타일을 정의하는 문서

HTML 문서에 스타일을 추가함.
CSS3가 현재 최신 버전.

선택자 {
    속성명: 속성값;
}

주석
/* 주석의 내용 */


## HTML에 CSS를 적용하는 방법

인라인 스타일: 태그에 직접 기술하기
스타일 태그: 스타일시트를 위한 태그를 추가하여 기술하기
문서 간의 연결: 스타일시트 문서를 따로 작성하여 HTML 문서와 연결하기

# 인라인 스타일: 태그에 직접 기술하는 방법

<p style="color: blue;">
    글자를 파랗게 만들어줘
</p>

웹 콘텐츠와 스타일시트를 분리하기 위해서는 사용하지 않는 편이 좋다.

# 스타일 태그: 스타일시트를 위한 태그를 추가하여 기술하는 방법. '내부 스타일시트'라고도 한다.

<style>
    p{color:red;}
</style>

# 문서간의 연결:  스타일시트 문서를 따로 작성하여 HTML 문서와 연결하는 방법

사용법

<head>태그 내부에 <link>태그를 사용해 CSS파일을 연결해준다.

<link href="./style.css" rel="stylesheet">

href : 연결하고자 하는 외부 소스의 *url* 을 기술
rel : 현재 문서와 외부 소스의 *연관 관계*를 기술


## 선택자

CSS를 적용할 대상을 선택하는 것
하나만 선택할 수도 있고 여러개를 선택할 수도 있다.

# 선택자 유형

전체 선택자(*) : 문서 내 모든 요소를 선택
태그 선택자(태그) : 특정 태그로 만들어진 모든 요소를 선택
클래스 선택자(.클래스명) : 특정 클래스 값이 지정된 모든 요소를 선택
아이디 선택자(#아이디명) : 특정 아이디 값이 지정된 요소를 선택
그룹 선택자(선택자,선택자,선택자 ...) : 여러 유형의 선택자를 한꺼번에 선택

# 우선순위

인라인 스타일이 우선적으로 적용된다
인라인 스타일이 아닌 경우 나중에 쓰여진 선언문이 적용된다.

선택자 우선순위: 쓰여진 순서랑 관계없이 정용되는 순위
1. 아이디 선택자
2. 클래스 선택자
3. 태그 선택자


## 박스 모델(box model)

브라우저 화면은 가로와 세로를 축으로 하는 2차원 공간이다.
따라서 브라우저를 통해 렌더링 되는 웹 요소들 또한 그 안에서 개별적으로 너비와 높이를 가진다.

박스 모델은 너비와 높이를 가지는 개별 요소를 가리켜 '박스'라 표현하고,
박스를 네가지 세부 영역으로 나누어 구분한 일종의 디자인 모델이다.

CSS로 스타일을 정의할 수 있는 모든 요소에는 박스 모델 관련 속성 중 일부 또는 전부를 적용할 수 있으며,
CSS는 영역 별로 크기를 따로 설정할 수 있도록 다양한 속성들을 제공한다.

#구성요소

바깥쪽 여백(margin) : 테두리 바깥에서 요소를 감싸는 여백
경계선(테두리)(border) : 콘첸츠와 안쪽 여백을 둘러싸는 테두리
안족여백(padding) : 테두리 안에서 콘텐츠 주변을 감싸는 여백
콘텐츠 영역(width,height) : 요소 내에 포함된 콘텐츠를 표시하는 영역

브라우저의 개발자 모드에서 computed탭을 보면 영역을 확인 할 수 있다.


## 테두리 스타일(border)
: 콘첸츠와 안쪽 여백을 둘러싸는 테두리

사용법
border-width : 테두리의 두께를 지정
border-style : 점선, 실선, 겹선 등으로 테두리의 모양을 지정
border-color : 테두리의 색상을 지정
border : 테두리의 두께, 모양, 색상을 한번에 지정
border-radius : 모서리를 둥굴게 만듬
...


## margin,padding 여백 지정
박스 모델의 여백에는 네 개의 면이 존재하는데,
속성값 사용 개수에 따라 네 면의 여백 크기를 달리 정할 수 있다.

margin: 값;             여백의 모든 면에 동일한 값을 지정
margin: 값, 값;         상하, 좌우의 여백의 값을 지정
margin: 값, 값, 값;      위, 좌우, 아래 여백의 값을 지정
margin: 값, 값, 값, 값;   위, 오른쪽, 아래, 왼쪽 여백의 값을 지정

각각 지정하는 벙법
margin-top, margin-bottom, margin-left, margin-right

box-sizing : content-box(콘텐츠박스를 기준으로 크기 조절)(기본값), border-box(테두리 박스를 기준)


## 크기 지정 단위
% : 내가 속한 영역을 기준으로 백분율 계산
-> 속한 영역에 관련 값이 있어야 적용 가능!

## 배경(background)
box의 배경을 설정 (테두리까지 포함한 box)

background-color     배경 색상 지정
background-clip      배경 적용 영역 범위
background-image     배경 이미지 지정
background-origin    배경 시작 영역 위치
background-size      배경 이미지의 크기
background-position  배경 이미지의 위치
background-repeat    배경 이미지의 반복 패턴


## color
글자 색을 지정할 때는 color 속성을 사용하며,
색지정 방법은 글자 색, 테두리 색, 배경 색 모두 동일하다.

키워드: 색상의 이름을 직접입력
rgb 함수: rgb 함수의 수치를 입력
hsl 함수: hsl 함수의 수치를 입력
16진수값: 색상의 16진수 값을 입력

# rgb함수
빛의 3원색인 red, green, blue의 줄임말

rgb(값, 값, 값)

rgb + 투명도
rgba(값, 값, 값, 값)

# hsl함수
색조(hue), 채도(saturation), 조도(lightness)를 입력받는 함수

hsl(값, 값, 값)

hsl + 투명도
hsla(값, 값, 값, 갑)

# 16진수 표현 방식 (rgb 색상 코드)

#RRGGBB

투명도 포함
#RRGGBBAA


## 글꼴 설정

font-family 텍스트의 글꼴을 정의할 때 사용
한개 이상의 글꼴을 지정할 수 있다.
여러개 사용시 처음 것만 적용되고 나머지는 처음 것이 안될 시 적용
시스템에 설치되어있는 글꼴 사용

p {
    font-family : Arial, Helvetica, sans-serif;
}

웹폰트
웹 서버로부터 제공바다 사용할 수 있는 '웹 전용 글꼴'

font-size        글자 크기
font-weight      글자 두께
line-height      행 높이
text-align       텍스트 정렬 방식
text-decoration  텍스트 줄 긋기

단위
rem  루트요소(<html>태그)의 글자 크기를 배수로 계산해 적용하는 상대 단위
em   부모요소의 글자 크기를 배수로 계산해 적용하는 상대 단위


## 요소의 유형

블록 레벨 요소
자기가 속한 영역의 너비를 모두 차지하여 블록을 형성한다.

인라인 요소들
자기가 필요한 만큼의 공간만 차지한다.

display
요소를 어느 유형으로 처리 할지 정의한다.

display: none;           요소를 화면에 표시하지 않는다.
display: inline;         인라인 요소로 지정 (요소크기만큼만 공간 차지)(공간 지정 불가능)
display: block;          블록 요소로 지정
display: inline-block;   인라인 요소로 표시하되 블록 레벨의 특성을 추가. (공간을 차지하게 만들 수 있음)
display: flex;           


## 문서의 흐름
왼쪽에서 오른쪽
위에서 아래

# float
요소를 문서의 흐름에서 제외시킨 채 부모 요소 또는 루트 요소를 기준으로 위치를 변경한다.
선택된 요소가 문서의 흐름에서 제외되어 상위 요소의 왼쪽 또는 오른쪽 면에 붙는 형태로 배치되도록 하는 특징을 가지고 있다.
사용가능한 속성값으로는 left, right, none

float을 적용용한 요소를 '부동 요소'라 부르기도 한다.
부동요소는 위치를 이동하면서 다른 요소의 공간에까지 영향을 주는데,
이는 잘 활용하면 유용한나 float를 적용하지 않은 요소의 공간에 영향을 주어 역효과를 가져온다.
이러한 상황에 대응하기 위해 사용하는 속성으로 clear가 있다.


## 위치 설정 position
문서 상에 요소를 배치하는 방법을 정의한다.
top, bottom, right, left 사용가능

# position 유형
static    기본값으로, 요소를 일반적인 문서의 흐름에 맞게 배치함.
relative  문서의 흐름에 맞춰 배치된 자리를 기준으로 요소를 이동시킴.
absolute  position이 지정된 상위 요소를 기준으로 요소를 이동시킴. 이때 요소는 문서의 흐름에서 제외됨.
fixed     화면을 기준으로 요소의 위치를 고정함

absolute는 position 속성을 가진 상위 요소를 기준으로 위치를 이동한다. 
position속성을 가진 상위 요소가 없으면 화면을 기준으로 이동한다.


## position과 z축
z-index 속성은 요소의 쌓인 순서(stack order)를 정의할 수 있다.
정수 값을 지정하여 쌓임 맥락(stacking context)에서의 레벨을 정의하는 방식으로 적용되며,
위치 지정 요소(position이 적용된 요소)에 대해 적용할 수 있는 속성이다.

z-index의 기본값은 auto이며, 정수 값으로 각 요소의 쌓임 순서를 결정한다.

z-index: 4;
z-index: 3;

## overflow
콘텐츠가 넘치는 현상을 제어

사용가능한 속성값
visible  기본값, 영역을 벗어난 콘텐츠
hidden   영역을 벗어난 콘텐츠를 잘라내어 보이지 않게 함
scroll   영역을 벗어난 콘텐츠에 스크롤로 표시
auto     pc 브라우저에서는 보통 scroll로 처리함. 웹 브라우저의 설정 값을 따름


## 선택자 유형

속성 선택자      특정 속성을 명시하여 요소를 선택           []
하위 요소 선택자  상위 요소에 포함된 하위 요소를 선택        공백
자식 요소 선택자  상위 요소의 바로 한 단계 하위 요소를 선택    >
인접 요소 선택자  형제 요소 중 첫 번째 형제 요소를 선택       +
형제 요소 선택자  형제 요소를 선택                       ~
(형제 선택자는 뒤이어서 나오는 형제에 대해서만 선택 가능하다)


# 기호와 함께 사용하는 속성 선택자
* : 값의 포함 여부
^ : 값의 시작 여부
$ : 값의 끝 여부

[width *= "2"]
[width $= "0"]


## 의사클래스 (pseudo-class)
의사클래스(가상클래스)는 선택자에 추가하는 키워드로,
요소가 어떤 특정한 상태가 되었을 때 요소를 선택하겠다는 의미

선택자:의사클래스 { 
    속성명: 속성값;
}

h1:hover {
    color: red;
}

# 자주 쓰이는
hover         마우스 포인터가 요소에 올라가 있다
active        사용자가 요소를 활성화했다. (클릭 등)
focus         요소가 포커스를 받고 있다.
disabled      비활성 상태의 요소이다.
nth-child()   형제 사이에서의 순서에 따라 요소를 선택한다.


## 의사 요소 (pseudo-elements)
의사 요소(pseudo-elements)는 선택자에 추가하는 키워드로,
이를 이용하면 선택한 요소의 특정 부분에 대한 스타일을 정의할 수 있다.

선택자::의사요소 {
    속성명: 속성값;
}

li::first-letter {
    font-size: 20px;
}

# 자주 쓰이는
after           요소의 앞에 의사 요소를 생성 및 추가한다.
before          요소의 뒤에 의사 요소를 생성 및 추가한다.
first-line      블록 레벨 요소의 첫 번째 선에 스타일을 적용한다.
marker          목록 시오의 스타일을 적용한다.
placeholder     입력 요소의 플레이스홀더(자리표시자) 스타일을 적용한다.


calc(계산식) 계산한 값을 반환. 계산식 사이에 공백 필요.


## 변형과 transform 속성
크기나 위치를 요소의 x축과 y축을 기준으로 바꾼다.
변형을 적용하기 위해서는 transform 속성을 사용한다.

translate(x,y)   x축과 y축 방향으로 이동
scale(x,y)       x축과 y축으로 확대 및 축소
skew(x,y)        x축과 y축으로 비틀어 왜곡한다.
rotate(deg)      지정한 각도만큼 회전한다.


## transition
transition 속성을 이용하면 요소에 지정되어 있는 스타일 속성을 완전히 다른 스타일로 바굴 수 있다.
스타일이 변화할 때 시간이나 변화 속도 등을 추가해 애니메이션 효과를 만들 수 있다.
변화를 주고자 하는 속성이나 실행 시간, 실행 방법, 지연시간 등의 정보를 포함 할 수 있다.

-property           속성을 지정
-duration           지속 시간
-delay              시작 지연 시간
-timing-function    실행 곡선 방식

# transition-timing-function
실행 시간동안 속도 변화 방식을 지정

ease        기본값으로, 점점 속도가 빨라지다가 끝날 때 다시 느려지는 방식
liner       처음부터 끝가지 같은 속도로 진행
ease-in     느리게 시작했다가 점점 빨라진다.
ease-out    빠르게 시작했다가 점점 느려진다.


## @keyframes, animation
콘텐츠가 TV 애니메이션과 같은 동적 움직임을 구현할 수 있도록 @keyframes 모듈과 animation 속성을 지원한다.

# keyframes
애니메이션을 표현하는 여러 개의 프레임을 정의
백분율을 이용해 프레임을 나누거나, 별도의 키워드로 간단하게 나눌 수도 있다.

@keyframes 애니메이션_이름 {
    from{ width: 100px;}
    to{width: 200px;}
}

@keyframes 애니메이션_이름 {
    0%{width: 100px;}
    33%{width: 133px;}
    66%{width: 166px;}
    100%{width: 200px;}
}

# animation
애니메이션의 실행 시간이나 방식 등을 정의

-name (필수)         적용할 키프레임 이름
-duration           애니메이션 지속 시간
-delay              애니메이션 시작 전 시간
-timing-function    속도 그래프
-direction          동작 진행 방향
-literation-count   반복 횟수
-fill-model         전후 상태 설정
-play-state         애니메이션 적용 여부

