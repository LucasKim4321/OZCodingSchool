인스타그램 프로젝트

DB 구조

유저(email 기반)
	소셜 로그인
	팔로우, 팔로워
포스트(블로그랑 비슷)
	댓글
	좋아요
	태그

기능

회원관련
	회원가입, 로그인, 비밀번호 찾기
	소셜로그인
	팔로우, 팔로우 취소
	팔로우/ 팔로워 수 및 목록 조회
	
포스트
	포스트 생성, 수정, 삭제, 나만보기(친한사람만 보기)
	댓글 작성, 수정, 삭제
	라이크
	무한스크롤 기능(포스트, 댓글)
	
ETC
DM, 릴스

mkdir pystagram
pyenv virtualenv 3.12.2 oz_pystagram
pyenv local oz_pystagram
poetry init
poetry add django
django-admin startproject config .

파이참 기본 셋팅
인터프리터 설정
렝귀지 설정

이메일 기반이라 유저를 커스터 마이징 해야함
마이그레이션 하기전에 먼저 설정 하고 해야함

맴버 앱 생성
python3 manage.py startapp member


member/models.py
from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager
from django.db import models

# 사용자 지정 메니져
class UserManager(BaseUserManager):
    def create_user(self, email, password):
        if not email:
            raise ValueError('올바른 이메일을 입력하세요.')
        user = self.model (
            email = self.normalize_email(email),
        )
        user.set_password(password) # 해시화
        user.is_active = False
        user.save(using = self._db)
        return user

    def create_superuser(self, email, password):
        user = self.create_user(email, password)
        user.is_admin = True
        user.is_active = True
        user.save(using=self._db)
        return user

# 암호화는 복호화가 가능함
# 암호화는 qwer1234 -> aslkfjdslkfj322kj43 -> 복호화 -> qwer1234
# 해시화는 복호화가 불가능함
# 해시화 qwer1234 -> aslkfjdslkfj322kj43 -> 일부분 암호화(aslkfj) -> 암호화를 반복 -> sldkfjsdlf -> 소실된 부분 때문에 복호화가 불가능
# 장고는 SHA256를 사용
# SHA-256은 암호학에서 사용하는 해시 함수(hash function) 중 하나예요. 주로 데이터 무결성 확인, 비밀번호 저장, 디지털 서명, 블록체인 같은 곳에 쓰임.

class User(AbstractBaseUser):  # 기본 기능은 상속받아서 사용
    email = models.EmailField(
        verbose_name='email',
        unique = True
    )
    is_active = models.BooleanField(default = False) # 기본적으로 비활성화 시켜놓고 확인 후 활성화
    is_admin = models.BooleanField(default = False)  # admin 기능
    # is_staff = models.BooleanField(default = False)  # is_staff 기능
    # is_superuser = models.BooleanField(default = False)  # is_superuser 기능
    nickname = models.CharField('nickname', max_length=20, unique=True)

    # 사용자 지정 메니져
    # User.objects.all()   <- objects가 메니져
    objects = UserManager()  # 메니져는 UserManager()
    USERNAME_FIELD = 'email'  # 기본 유저네임(아이디)를 email로 지정
    EMAIL_FIELD = 'email'
    REQUIRED_FIELDS = []

    class Meta:
        verbose_name = '유저'
        verbose_name_plural = f'{verbose_name} 목록'

    def get_full_name(self): # 사용자의 전체 이름(Full name)을 반환. 성과 이름을 합침
        # return f"{self.first_name} {self.last_name}"
        return self.nickname

    def get_short_name(self):  # 일반적으로 닉네임, 이름(first name) 등을 반환
        return self.nickname

    def __str__(self):
        return self.nickname

    def has_perm(self, perm, obj=None):
        return True

    def has_module_perms(self, app_label):
        return True

    @property
    def is_staff(self):
        return self.is_admin

    @property
    def is_superuser(self):
        return self.is_admin

# @property
# 함수는 user.is_superuser() 이렇게 쓰는걸 user.c 이렇게 변수처럼 쓸 수 있게 만들어줌
# 기존에 존재하는 컬럼 is_superuser, is_superuser가 가진 기능을 사용하려고 사용.
# 혹은  is_superuser = models.BooleanField(default = False) 이렇게 필드를 만들어 줘도 되지만 해당 필드를 사용하지 않을거기 때문에 @property사용

# AbstractBaseUser: Django의 추상 기반 클래스 중 하나로, 비밀번호 및 인증 관련 필드와 메서드만을 제공하며, 사용자 정의 필드를 추가하여 완전한 User 모델을 구성할 수 있습니다.


settings.py

설치된 앱 목록에 memeber앱 추가
INSTALLED_APPS = [
    # own
    'member',
]

최하단에 
# Auth
AUTH_USER_MODEL = 'member.User'  # 유저 모델 지정

마이그레이션
python3 manage.py makemigrations
python3 manage.py migrate

poetry add django-extentions
poetry add ipython

설치된 앱 목록(INSTALLED_APPS)에 추가
INSTALLED_APPS = [
    # 3rd party
    'django_extensions',
]

superuser 생성
python manage.py createsuperuser
커스텀 유저 모델에 유저 이름과 이메일을 모두 이메일로 지정했기 때문에 유저 이름을 묻지 않고 이메일만 물어봄


# 개발 환경에서 사용하는 경로
STATIC_URL = 'static/'
STATIC_DIR = BASE_DIR / 'static'

STATICFILES_DIRS = [
    STATIC_DIR,
]

# 배포할 때 사용하는 경로
STATIC_ROOT = BASE_DIR / '.static_root'


# member/forms.py

from django import forms
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm

# 유저 모델 가져오기
# get_user_model()을 하면 settings에 설정된 AUTH_USER_MODEL 을 가져옴
# Auth유저를 바꿨기 때문에
User = get_user_model()

class SignupForm(UserCreationForm):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # class_default_fields = ('password1', 'password2')
        # for field in class_default_fields:
        for field in ('password1', 'password2'):
            self.fields[field].widget.attrs['class'] = 'form-control'
            self.fields[field].widget.attrs['placeholder'] = 'password'
            if field.startswith('password1'):
                self.fields[field].label = '비밀번호'
            else:
                self.fields[field].label = '비밀번호 확인'


    class Meta(UserCreationForm.Meta):
        model = User
        fields = ('email', 'nickname',)
        labels = {
            'email' : '이메일',
            'nickname': '닉네임',
        }
        widgets = {
            'email' : forms.EmailInput(
                attrs= {
                    'placeholder' : 'example@example.com',
                    'class' : 'form-control',
                }
            ),
            'nickname': forms.TextInput(
                attrs= {
                    'placeholder':'닉네임',
                    'class': 'form-control',
                }
            )
        }


# settings.py
# 템플릿 경로 설정
TEMPLATES = [
    {
    'DIRS': [BASE_DIR / 'templates'],
    }
]


# member/views.py

from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.urls import reverse_lazy
from django.views.generic import FormView

from member.forms import SignupForm


class SignupView(FormView):
    template_name = 'auth/signup.html'  # 템플릿 설정
    form_class = SignupForm  # 폼 설정
    # success_url = reverse_lazy('signup_done')  # 완료시 url
    # success_url은 클래스가 로딩될 때 설정됩니다.
    # 만약 reverse()를 쓴다면, 클래스가 로딩될 시점에 URLConf가 완전히 로딩되지 않았을 수도 있어
    # ImportError 또는 ImproperlyConfigured 오류가 발생할 수 있습니다.
    # reverse_lazy() → 나중에 실제로 URL이 필요할 때 계산 (지연 평가)

    def form_valid(self,form):
        # form.save()
        # return HttpResponseRedirect(self.get_success_url())

        user = form.save()
        return render(
            self.request,
            template_name= 'auth/signup_done.html',
            context={'user':user}
        )


# templates/base.html

{%  load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Pystagram</title>
    <link rel="stylesheet" href="{% static 'css/bootstrap.css' %}">
</head>
<body>
<div class="container">
    {% block content %}{% endblock %}
</div>

    <script src="{% static 'js/bootstrap.bundle.js' %}"></script>
</body>
</html>

# templates/signup.html
{%  extends 'base.html' %}
{% block content %}
    <div>
        <h1 class="title">회원가입</h1>
        <form method="POST">
            {% csrf_token %}
            {% for field in form %}
                <div class="form-group row mb-2">
                    <labe class="form-label col-md-2" for="{{ field.auto_id }}">{{ field.label }}</labe>
                    <div class="col-md-10">
                        {{ field }}
                    </div>
                    {% for error in field.errors %}
                        <span class="text-danger">{{ error }}</span>
                    {% endfor %}
                </div>
            {%  endfor %}
            {% for error in form.non_field_error %}
                <p class="text-danger">{{ error }}</p>
            {% endfor %}
            <button class="btn btn-success opacity-50">회원가입</button>
        </form>
    </div>
{% endblock %}


# config/urls.py

from django.contrib import admin
from django.urls import path
from django.views.generic import TemplateView

from member import views as member_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('signup/', member_views.SignupView.as_view(), name='signup'),
    # path('signup/done/', TemplateView.as_view(template_name='auth/signup_done.html'), name='signup_done'),
]


# signup_done.html

{% extends 'base.html' %}
{% block content %}
    <div class="col-8 offset-2">
        <h1>회원가입이 거의 완료되었습니다.</h1>
        <p>
            이메일 인증을 하여 회원가입을 완료해주세요.
            <br>
            ({{ user.email }})
        </p>
    </div>
{% endblock %}



<aside>
💡 **환경변수**는 민감한 정보를 코드에서 분리하여 노출을 최소화합니다. 
환경에 따라 설정을 쉽게 변경할 수 있어 코드 수정 없이 다양한 환경에 대응할 수 있습니다. 
개발 팀 내에서 동일한 코드를 사용하되, 각자 환경에 맞는 설정을 사용할 수 있어 협업이 원활해집니다.

</aside>

GitHub에 올릴 때는 `.gitignore` 파일을 이용하여 푸시하지 않을 수 있습니다.

### python-dotenv

보편적으로 환경변수는 `python-dotenv` 를 이용해 관리합니다.

`python-dotenv`는 파이썬 애플리케이션에서 환경 변수를 쉽게 관리하기 위한 라이브러리입니다. `.env` 파일에 저장된 환경 변수를 자동으로 불러와서 파이썬 코드 내에서 사용할 수 있게 해줍니다.

[python-dotenv](https://pypi.org/project/python-dotenv/)

### 주요 기능

- **환경 변수 관리**: `.env` 파일에 환경 변수들을 정의하고, 이를 코드에서 쉽게 불러와서 사용할 수 있습니다.
- **보안성**: API 키나 데이터베이스 비밀번호 같은 민감한 정보를 소스 코드에 직접 작성하지 않고 `.env` 파일로 분리함으로써 보안을 강화할 수 있습니다.
- **유연성**: 코드의 실행 환경에 따라 다른 설정을 사용할 수 있어 개발, 테스트, 프로덕션 환경 간의 설정 차이를 쉽게 관리할 수 있습니다.

### 사용 예시

1. **설치**:
    
    ```bash
    >> pip install python-dotenv
    ```
    
2. **.env 파일 생성**: 프로젝트 루트에 `.env` 파일을 생성하고, 환경 변수를 작성합니다.
    
    ```bash
    # .env 파일 예시
    DATABASE_URL=postgres://user:password@localhost:5432/mydatabase
    SECRET_KEY=mysecretkey
    ```
    
3. **파이썬 코드에서 사용**:
    
    ```python
    from dotenv import load_dotenv
    import os
    
    load_dotenv()  # .env 파일의 환경 변수를 불러옵니다
    
    database_url = os.getenv('DATABASE_URL')
    secret_key = os.getenv('SECRET_KEY')
    
    print(f"Database URL: {database_url}")
    print(f"Secret Key: {secret_key}")
    
    ```
    
이렇게 `.env` 파일에 정의된 환경 변수를 코드에서 불러와 사용할 수 있습니다. 이는 프로젝트의 설정을 관리하고 민감한 정보를 보호하는 데 유용합니다.


# config_secret

.config_secret 디렉토리를 생성해서 환경변수를 관리하면 민감한 정보를 안전하게 보관하고 코드와 환경 설정을 분리하기 좋습니다. 이 방법을 사용하면 환경별로 다른 설정을 쉽게 관리할 수 있습니다. 
secret.json 파일을 통해 json 형태로 정보를 관리할 경우, 여러 개의 DB를 한 곳에 묶거나의 방식을 통해 관리가 용이합니다. 이 때는 파일을 읽어와서 json.loads 라는 명령어를 통해서 json string을 dictionary 형태로 바꿔 사용할 수 있습니다.
사용 예시
import os
import json

# 현재 환경을 지정 (보통 환경 변수로 지정하거나 기본 값을 사용)
current_env = os.getenv('ENV', 'development')

# 해당 환경의 secret.json 파일 경로 설정
secret_file = os.path.join('config_secret', f'{current_env}.json')

# secret.json 파일 로드
with open(secret_file) as f:
    secrets = json.load(f)

# JSON 데이터를 사용해 환경 변수를 설정합니다.
DEBUG = secrets['DEBUG']
DATABASE_URL = secrets['DATABASE_URL']
SECRET_KEY = secrets['SECRET_KEY']

print(f"DEBUG: {DEBUG}")
print(f"DATABASE_URL: {DATABASE_URL}")
print(f"SECRET_KEY: {SECRET_KEY}")


이메일 인증 기능
네이버 이메일 환경설정
POP3/SMTP, IMAP/SMTP  활성화

secret.json
"email": {
    "user": "xowls0131@naver.com",
    "password": "20s820asxS!"
  },

settings.py
# Email
# from django.core.mail.backends.smtp import EmailBackend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.naver.com'
EMAIL_USE_TLS = True  # 보안연n결
EMAIL_PORT = 587  # 네이버 메일 환경설정에서 확인 가능
EMAIL_HOST_USER = SECRET["email"]["user"]
EMAIL_HOST_PASSWORD =  SECRET["email"]["password"]

네이버
2단계 인증 해제

python3 manage.py shell_plus

In [1]: from django.core.mail import send_mail

In [2]: title = '제목입니다.'

In [3]: message = '이것은 django에서 보낸 메시지입니다.'

In [4]: from_email = settings.EMAIL_HOST_USER

In [5]: to_email = ['xowls0131@naver.com']

In [6]: send_mail(title, message, from_email, to_email)


---------------------
# swiper (슬라이드)
---------------------

https://swiperjs.com/get-started#use-swiper-from-cdn

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"/>

<!-- Slider main container -->
<div class="swiper">
  <!-- Additional required wrapper -->
  <div class="swiper-wrapper">
    <!-- Slides -->
    <div class="swiper-slide">Slide 1</div>
    <div class="swiper-slide">Slide 2</div>
    <div class="swiper-slide">Slide 3</div>
    ...
  </div>
  <!-- If we need pagination -->
  <div class="swiper-pagination"></div>

  <!-- If we need navigation buttons -->
  <div class="swiper-button-prev"></div>
  <div class="swiper-button-next"></div>

  <!-- If we need scrollbar -->
  <div class="swiper-scrollbar"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>


---------------------
# font-awesome (아이콘)
---------------------

https://fontawesome.com/

start for free

download
https://fontawesome.com/download

free for web

Docs

Getting Started

webfonts


----------------
무한 스크롤
----------------


https://github.com/imakewebthings/waypoints

In [1]: post_list = Post.objects.all()

In [2]: for _ in range(20):
   ...:     for post in post_list:
   ...:         images = PostImage.objects.filter(post=post)
   ...:         post.id = None
   ...:         post.save()
   ...:         for image in images:
   ...:             image.id = None
   ...:             image.post = post
   ...:             image.save()



폼셋
https://cdnjs.com/libraries/jquery.formset


# 마이그레이션 목록 표시
python3 manage.py showmigrations

# 해당 마이그레이션으로 돌아감
python3 manage.py migrate post 0001


------------
좋아요
------------

------------
팔로우
------------

In [1]: u = User.objects.get(email='admin@admin.com')

In [2]: u2 = User.objects.first()

In [3]: u
Out[3]: <User: real-admin>

In [4]: u2
Out[4]: <User: 111>

In [5]: UserFollowing.objects.create(to_user=u, from_user=u2)
Out[5]: <UserFollowing: UserFollowing object (1)>

In [6]: u.followers.count()
Out[6]: 1

In [7]: u2.following.count()
Out[7]: 1

In [9]: u2.followers.count()
Out[9]: 0

네이버 로그인

네이버 개발자 센터 검색
https://developers.naver.com/main/

네이버 로그인 클릭

오픈 api 이용 신청 클릭

약관동의, 게정 정보 등록 후 애플리케이션 등록

애플리케이션 등록 메뉴에서 
네이버 로그인 선택
이메일 주소 체크

로그인 오픈 API
서비스 환경

PC웹
서비스 URL
http://localhost:8000

네이버 로그인
Callback URL (최대 5개)
http://localhost:8000/oauth/naver/callback

등록하기

애플리케이션 정보
Client ID, Client Secret를 프로젝트 settings.py에 등록

리퀘스트 페키지 설치
poetry add requests

oatuh_views.py
NAVER_CALLBACK_URL = '/naver/callback/'

documents -> api명세

https://nid.naver.com/oauth2.0/authorize?response_type=code&client_id=클라이언트_아이디&redirect_uri=http://localhost:8000/naver/callback/&state=abc


https://nid.naver.com/oauth2.0/token

확인
python3 manage.py shell_plus
user = User.objects.last()
user
user.nickname
user.password


----------------
깃허브 로그인
----------------

깃허브에서 홈페이지에서
Settings/Developer settings/Oauth Apps
New Oauth App 클릭

Homepage URL 설정
http://localhost:8000

Authorization callback URL 설정
http://localhost:8000/oauth/github/callback/

github oauth documents
https://docs.github.com/ko/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps

요청을 보내면 이런식으로 데이터가 들어와서 파싱을 해줘야함.
access_token=gho_16C7e42F292c6912E7710c838347Ae178B4a&scope=repo%2Cgist&token_type=bearer

파싱
https://docs.python.org/ko/3.13/library/urllib.parse.html