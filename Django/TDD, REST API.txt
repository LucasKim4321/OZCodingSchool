
--------------------------------------------------
TDD (TEST-Driven Development => 테스트 주도 개발)
--------------------------------------------------

테스트 코드를 먼저 만들고 -> 그 후에 소스 코드 개발을 함.

보통: 소스코드를 개발 -> 그 후 테스트 코드를 짬.

코드의 기능이 미리 나와야함.
List, detail, create, update 등과 같은 기능이 명확하게 정의 되어 있어야함.


장점
1. 목표가 명확
2. 버그 방어막을 만듬
3. 협업이 편해짐
4. 코드의 품질이 올라감

장고 테스트
https://docs.djangoproject.com/en/5.1/topics/testing/

Writing and running tests

# 앱에 있는 테스트 모듈 테스트
python3 manage.py test animals.tests

# 앱에 있는 것 모두 테스트
python3 manage.py test animals

# 앱에 있는 클래스 테스트
python3 manage.py test animals.tests.AnimalTestCase

# 앱에 있는 메소드 테스트
python3 manage.py test animals.tests.AnimalTestCase.test_animals_can_speak


분류
1. 모델 테스트 케이스
2. View 테스트 케이스 => list => 올바른 데이터가 오는지


pyenv virtualenv 3.12.2 oz_rest_blog
pyenv local oz_rest_blog
poetry init
poetry add django
django-admin startproject config .
파이참 기본 셋팅

python3 manage.py startapp blog


blog_list => get으로 요청시
Blog_list에 1개의 context만 들어있음

Blog_create => post 요청시에 
LoginRequired => 확인
새로운 Blog가 생성됨.
=> 3가지 방법

1. published가 null인것
2. published가 future인것
3. published_at이 현재보다 작은것

테스트 가능한 것들
https://docs.djangoproject.com/en/5.1/topics/testing/tools/#assertions


-------------------
REST / API
-------------------

RESTful API

REST (representation State Transfer)
=> 묘사된 상태 전송(상태를 표현하는 전송)

API (Application Programming Interface)
네이버 로그인할 때 => profile/me => 응답을 받아옴

API요청
https://naver.com/profile/me => 응답을 받아옴


REST API

1. 행동을 HTTP Method(get / post / put / patch / delete)를 사용하여 표현한다.
2. /슬래시는 계층 관계를 나타낼 때 사용가능
3. 마지막 슬래시는 포함하지 않는다. => /blog/ x
4. Resource들은 명사를 사용한다. => /blog/create/ x
5. _보다 - 을 권장합니다.
6. 소문자를 사용합니다.
7. 파일 확장자는 포함하지 않는다.
8. 응답은 JSON이 대세

GET => http://localhost:8000/avengers/hulk
헐크에 관한 값을 리턴해줌

GET => http://localhost:8000/blog/1
=> 1번 블로그를 돌려줌

POST => http://localhost:8000/blog => JSON
=> 블로그 생성

PUT, PATCH =>  http://localhost:8000/blog/1 => JSON
=> 블로그 수정

DELETE => http://localhost:8000/blog/1 => JSON
=> 블로그 삭제


# GraphQL
-------------
# REST API 대안으로 나옴


# SPA (Single Page Application)
--------------------------------

React, Vue, Angular

HTML, CSS, JS


https://www.django-rest-framework.org/
https://www.django-rest-framework.org/tutorial/quickstart/

poetry add djangorestframework


poetry add django-extentions
poetry add ipython

설치된 앱 목록(INSTALLED_APPS)에 추가
INSTALLED_APPS = [
    # 3rd party
    'django_extensions',
]


In [2]: blog_list = Blog.objects.all()

In [3]: for _ in range(20):
   ...:     for blog in blog_list:
   ...:         blog.id = None
   ...:         blog.save()


git ls-files | grep '__pycache__' | xargs git rm --cached
git commit -m "Remove __pycache__ and all its contents from tracking"
git push origin main



